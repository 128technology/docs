(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(225)),o={title:"AWS Transit Gateway Connect Plugin",sidebar_label:"AWS Transit Gateway Connect"},c={unversionedId:"plugin_aws_tgw_connect",id:"plugin_aws_tgw_connect",isDocsHomePage:!1,title:"AWS Transit Gateway Connect Plugin",description:"The 128T-aws-transit-gateway-connect plugin provides integration between a 128T and a Transit Gateway. It does so with the use of BGP for sharing routes and GRE tunnels to encapsulate the BGP traffic as well as any other traffic to be sent to the Transit Gateway.",source:"@site/docs/plugin_aws_tgw_connect.md",slug:"/plugin_aws_tgw_connect",permalink:"/docs/plugin_aws_tgw_connect",version:"current",lastUpdatedAt:1629908131,sidebar_label:"AWS Transit Gateway Connect",sidebar:"docs",previous:{title:"BGP Community Services Plugin",permalink:"/docs/plugin_bgp_community_services"},next:{title:"Cloud High Availability Plugin",permalink:"/docs/plugin_cloud_ha"}},l=[{value:"Version Restrictions",id:"version-restrictions",children:[{value:"Terms",id:"terms",children:[]},{value:"Approach",id:"approach",children:[]}]},{value:"Setup Credentials on the Conductor",id:"setup-credentials-on-the-conductor",children:[]},{value:"Configuration Snippet",id:"configuration-snippet",children:[]},{value:"Restrictions",id:"restrictions",children:[]},{value:"Troubleshooting",id:"troubleshooting",children:[{value:"Configuration Generation",id:"configuration-generation",children:[]},{value:"Helpful Commands",id:"helpful-commands",children:[]}]},{value:"Appendix",id:"appendix",children:[{value:"Example Configuration Generation",id:"example-configuration-generation",children:[]}]}],s={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The 128T-aws-transit-gateway-connect plugin provides integration between a 128T and a Transit Gateway. It does so with the use of BGP for sharing routes and GRE tunnels to encapsulate the BGP traffic as well as any other traffic to be sent to the Transit Gateway."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The instructions for installing and managing the plugin can be found ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/plugin_intro#installation-and-management"}),"here"),"."))),Object(r.b)("h2",{id:"version-restrictions"},"Version Restrictions"),Object(r.b)("p",null," The router configuration that is generated is only compatible with 128T versions which have ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/config_gre_tunnel"}),"native GRE support")," (128T >= 5.2.0). "),Object(r.b)("h3",{id:"terms"},"Terms"),Object(r.b)("p",null,"General Terms:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Transit Gateway - A cloud router which connects VPCs and on-premise networks through a central hub."),Object(r.b)("li",{parentName:"ul"},"Virtual Private Cloud (VPC) - A logically isolated virtual network in AWS where resources exist."),Object(r.b)("li",{parentName:"ul"},"Transit Gateway Attachment - How the Transit Gateway attaches to a network.")),Object(r.b)("p",null,"Transit Gateway Connect Terms:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Transit Gateway Connect - A logical unit containing the Connect Attachment, Transport Attachment, a Connect VPC, and the 128T."),Object(r.b)("li",{parentName:"ul"},"Transit Gateway Connect Attachment - A new type of Transit Gateway Attachment which operates on top of an existing Transport Transit Gateway Attachment."),Object(r.b)("li",{parentName:"ul"},"Transport Transit Gateway Attachment - An attachment on top of which a Connect Attachment is created. Must be either of type VPC or VPN."),Object(r.b)("li",{parentName:"ul"},"Transit Gateway Connect Peer - A peer that communicates over GRE and with BGP to the Transit Gateway Connect. In our case, this is a 128T.")),Object(r.b)("h3",{id:"approach"},"Approach"),Object(r.b)("p",null,"Configure the following components, in order:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.aws.amazon.com/vpc/latest/tgw/tgw-getting-started.html"}),"Transit Gateway")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.aws.amazon.com/vpc/latest/tgw/tgw-vpc-attachments.html"}),"Transport Transit Gateway Attachment")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html"}),"Transit Gateway Connect Attachment")),Object(r.b)("li",{parentName:"ul"},"Additionally, the routing tables must be configured to transport the GRE traffic to the Transit Gateway network interface.")),Object(r.b)("p",null,'The plugin interacts with the AWS APIs to identify an existing "Connect Peer" that applies to the given node. Matching is based on the network interface IP address and the Connect Peer\'s peer address. If there is no existing Connect Peer, the plugin creates one on behalf of the user. The plugin chooses the first ',Object(r.b)("inlineCode",{parentName:"p"},"available")," Transit Gateway Connect Attachment to create the Transit Gateway Connect Peer. "),Object(r.b)("p",null,"This logic collects the necessary data for the plugin to generate the appropriate BGP and GRE configuration for connection."),Object(r.b)("h2",{id:"setup-credentials-on-the-conductor"},"Setup Credentials on the Conductor"),Object(r.b)("p",null,"Use the following steps to configure the Conductor to query and create AWS objects. On each Conductor node:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html"}),"Install")," the AWS CLI if not already installed."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"}),"Configure")," AWS CLI using ",Object(r.b)("inlineCode",{parentName:"li"},"aws configure"),". Be sure to specify the credentials, and ",Object(r.b)("inlineCode",{parentName:"li"},"json")," for the ",Object(r.b)("inlineCode",{parentName:"li"},"output"),"."),Object(r.b)("li",{parentName:"ol"},"Run the following: ",Object(r.b)("inlineCode",{parentName:"li"},"aws ec2 describe-transit-gateway-connect-peers"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If the configuration is valid a json response is printed."))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-upgrade"}),"Update")," the AWS CLI to the latest version available and then try step 3 again.")),Object(r.b)("h2",{id:"configuration-snippet"},"Configuration Snippet"),Object(r.b)("p",null,"To determine which nodes/interfaces are to be used to connect to the transit gateway, the plugin configuration datamodel needs a tagging mechanism on the ",Object(r.b)("inlineCode",{parentName:"p"},"network-interface"),"'s ",Object(r.b)("inlineCode",{parentName:"p"},"address")," to let the plugin know which interfaces are to be used for peering."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"router\n    node\n        device-interface      base\n            network-interface   base-intf\n                address\n                    ip-address                   10.10.10.10\n                    prefix-length                24\n                    gateway                      10.10.10.11\n\n                    aws-transit-gateway-connect\n                        enable true\n                    exit\n                exit\n            exit\n        exit\n    exit\nexit\n")),Object(r.b)("p",null,"If the router you are tagging is in a different region than the conductor, you must configure the region of the router."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"router\n    aws-transit-gateway-connect\n        region us-west-2\n    exit\nexit\n")),Object(r.b)("h2",{id:"restrictions"},"Restrictions"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Due to the nature of tagging a specific ",Object(r.b)("inlineCode",{parentName:"li"},"address")," under the ",Object(r.b)("inlineCode",{parentName:"li"},"network-interface"),", this plugin only supports peering over an interface with a static IP address.")),Object(r.b)("h2",{id:"troubleshooting"},"Troubleshooting"),Object(r.b)("h3",{id:"configuration-generation"},"Configuration Generation"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"/var/log/128technology/persistentDataManager.log")," file at trace level will show whether the configuration generation was run, as well as output and return code.\nConfiguration generation logs can be found on the conductor under ",Object(r.b)("inlineCode",{parentName:"p"},"/var/**log**/128technology/plugins/aws-transit-gateway-connect-generate-configuration.log"),"."),Object(r.b)("h3",{id:"helpful-commands"},"Helpful Commands"),Object(r.b)("p",null,"After the configuration is generated, the BGP peering status can be queried on the 128T side using the following commands on the router:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"show bgp")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"show bgp neighbors")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"show bgp summary"))),Object(r.b)("p",null,"On the AWS Portal, under ",Object(r.b)("inlineCode",{parentName:"p"},"VPC")," > ",Object(r.b)("inlineCode",{parentName:"p"},"Transit Gateway Attachments")," > ",Object(r.b)("inlineCode",{parentName:"p"},"<your connect attachments>")," > ",Object(r.b)("inlineCode",{parentName:"p"},"Connect peers"),", there will be entries for the 128T as a connect peer and the BGP status. "),Object(r.b)("h2",{id:"appendix"},"Appendix"),Object(r.b)("h3",{id:"example-configuration-generation"},"Example Configuration Generation"),Object(r.b)("p",null,"With the example configuration and the following AWS TGW connect peer "),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Field"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Value"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"TGW GRE IP"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"10.128.2.201")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"TGW BGP IP 1"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"169.254.192.26")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"TGW BGP IP 2"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"169.254.192.27")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"128T GRE IP"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"10.128.2.25")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"128T BGP IP"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"169.254.192.25")))),Object(r.b)("p",null,"The following config will be generated:"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"base")," device-interface already exists and the ",Object(r.b)("inlineCode",{parentName:"p"},"gre")," network-interface is generated under the ",Object(r.b)("inlineCode",{parentName:"p"},"base")," device-interface."))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'router\n    node\n        device-interface base\n            network-interface  gre\n                name       gre\n                type       gre-tunnel\n\n                tunnel\n                    destination  10.128.2.201\n\n                    source\n                        network-interface\n                    exit\n                exit\n            exit\n        exit\n        device-interface  bgp\n            name               bgp\n            description        "Auto-generated host KNI interface for aws-transit-gateway-connect"\n            type               host\n\n            network-interface  bgp-intf\n                name       bgp-intf\n                type       external\n\n                address    169.254.192.25\n                    ip-address     169.254.192.25\n                    prefix-length  29\n                exit\n            exit\n        exit\n    exit\n\n    routing              default-instance\n        type              default-instance\n\n        routing-protocol  bgp\n            type            bgp\n            local-as        64512\n            router-id       169.254.192.25\n\n            address-family  ipv4-unicast\n                afi-safi  ipv4-unicast\n            exit\n\n            neighbor        169.254.192.26\n                neighbor-address  169.254.192.26\n                neighbor-as       64512\n\n                transport\n\n                    local-address\n                        node       Node1\n                        interface  bgp-intf\n                    exit\n                exit\n\n                address-family    ipv4-unicast\n                    afi-safi       ipv4-unicast\n                    next-hop-self  true\n                exit\n            exit\n\n            neighbor        169.254.192.27\n                neighbor-address  169.254.192.27\n                neighbor-as       64512\n\n                transport\n\n                    local-address\n                        node       Node1\n                        interface  bgp-intf\n                    exit\n                exit\n\n                address-family    ipv4-unicast\n                    afi-safi       ipv4-unicast\n                    next-hop-self  true\n                exit\n            exit\n\n            redistribute    connected\n                protocol  connected\n            exit\n        exit\n\n        static-route      169.254.192.26/32 1\n            destination-prefix  169.254.192.26/32\n            distance            1\n\n            next-hop-interface  Node1 gre\n                node       Node1\n                interface  gre\n            exit\n        exit\n\n        static-route      169.254.192.27/32 1\n            destination-prefix  169.254.192.27/32\n            distance            1\n\n            next-hop-interface  Node1 gre\n                node       Node1\n                interface  gre\n            exit\n        exit\n    exit\nexit\n')))}b.isMDXComponent=!0},225:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,h=p["".concat(o,".").concat(u)]||p[u]||d[u]||r;return n?i.a.createElement(h,c(c({ref:t},s),{},{components:n})):i.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);