"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[915],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=d(n),g=i,f=h["".concat(s,".").concat(g)]||h[g]||u[g]||a;return n?o.createElement(f,r(r({ref:t},l),{},{components:n})):o.createElement(f,r({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},89641:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return l},default:function(){return h}});var o=n(87462),i=n(63366),a=(n(67294),n(3905)),r=["components"],c={title:"Configuration Management on the 128T",sidebar_label:"Configuration Management"},s=void 0,d={unversionedId:"config_basics",id:"config_basics",title:"Configuration Management on the 128T",description:"Configuration is what transforms your 128T software into a Session-Smart Router. The following sections describe the various configurations available to you on your 128T, the basics of the configuration workflow, and important things to consider when managing your 128T devices.",source:"@site/docs/config_basics.md",sourceDirName:".",slug:"/config_basics",permalink:"/docs/config_basics",tags:[],version:"current",lastUpdatedAt:1651524013,formattedLastUpdatedAt:"5/2/2022",frontMatter:{title:"Configuration Management on the 128T",sidebar_label:"Configuration Management"},sidebar:"docs",previous:{title:"Glossary",permalink:"/docs/concepts_glossary"},next:{title:"Access Management",permalink:"/docs/config_access_mgmt"}},l=[{value:"Factory Default Configuration",id:"factory-default-configuration",children:[],level:2},{value:"Generated Configuration",id:"generated-configuration",children:[{value:"Forcing the Generation of Configuration",id:"forcing-the-generation-of-configuration",children:[],level:3}],level:2},{value:"Running",id:"running",children:[],level:2},{value:"Candidate",id:"candidate",children:[],level:2},{value:"Configuration Workflows",id:"configuration-workflows",children:[{value:"Comparing Configurations",id:"comparing-configurations",children:[],level:3},{value:"Restoring the Candidate",id:"restoring-the-candidate",children:[],level:3},{value:"Import/Export",id:"importexport",children:[],level:3}],level:2}],u={toc:l};function h(e){var t=e.components,c=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},u,c,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Configuration is what transforms your 128T software into a Session-Smart Router. The following sections describe the various configurations available to you on your 128T, the basics of the configuration workflow, and important things to consider when managing your 128T devices."),(0,a.kt)("h2",{id:"factory-default-configuration"},"Factory Default Configuration"),(0,a.kt)("p",null,"When a new node is initialized, it will be given factory default configuration. The factory defaults include the configuration attributes given to it during initialization (the router name and node name, and a high availability counterpart node if applicable) as well as various configuration elements that are part of the global data of an Authority \u2013 session-type elements that represent common network protocols (e.g., HTTP, HTTPS, SSH), and service-class elements for common DSCP values."),(0,a.kt)("p",null,'By default, these factory default elements are not displayed when viewing the configuration through the PCLI. To view the factory default settings, add the keyword "verbose" at the end of a ',(0,a.kt)("inlineCode",{parentName:"p"},"show")," configuration statement; e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"show config running verbose"),". Factory default elements are always displayed when viewing the configuration through the GUI."),(0,a.kt)("p",null,"To restore a 128T system back to its factory defaults, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"restore config factory-default")," command from the PCLI."),(0,a.kt)("h2",{id:"generated-configuration"},"Generated Configuration"),(0,a.kt)("p",null,"Occasionally, the 128T Conductor will generate configuration on behalf of the administrator; this is typically done to facilitate some configuration steps that would otherwise be somewhat onerous or prone to error. When the 128T Conductor generates configuration on behalf of an administrator, it includes a ",(0,a.kt)("inlineCode",{parentName:"p"},"generated")," setting in each configuration element it has generated, and sets the value of that setting to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("p",null,"The 128T Conductor will regenerate this configuration each time the configuration is committed. This ensures that the generation properly reflects any changes that have been made to the rest of the configuration from which the generated configuration was derived. Thus, when committing configuration, the 128T Conductor first ",(0,a.kt)("em",{parentName:"p"},"deletes all configuration that has the generated flag set to true"),"."),(0,a.kt)("p",null,"The consequence of this is that if you have made any changes to configuration elements that were originally generated by the 128T Conductor, but neglected to set the generated flag to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", those elements will be discarded and regenerated. Thus, it is mandatory that you set the generated flag to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," before modifying any generated configuration to make it persistent."),(0,a.kt)("h3",{id:"forcing-the-generation-of-configuration"},"Forcing the Generation of Configuration"),(0,a.kt)("p",null,"The Force Configuration Generation command (selected from the GUI or using ",(0,a.kt)("inlineCode",{parentName:"p"},"create config autogenerated")," from the PCLI) generates and stages the configuration changes into the current candidate configuration. This allows you to validate, inspect, make edits, and commit these changes as part of the work flow."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"toolbar",src:n(55990).Z}),"\n",(0,a.kt)("img",{alt:"popup",src:n(27922).Z}),"\n",(0,a.kt)("img",{alt:"dialog",src:n(65550).Z})),(0,a.kt)("h2",{id:"running"},"Running"),(0,a.kt)("p",null,"The running configuration is the set of configuration elements that the 128T is currently using to make routing decisions, forward traffic, enforce policy, etc. The 128T loads its running configuration when the software starts; this configuration will either be the one that it retrieves at start from its conductor, or from its local disk (in the case where it is either unmanaged, or unable to reach its conductor)."),(0,a.kt)("h2",{id:"candidate"},"Candidate"),(0,a.kt)("p",null,"The 128T has one ",(0,a.kt)("em",{parentName:"p"},"candidate")," configuration that is common to all administrators. All configuration additions, modifications, and deletions are applied to the candidate configuration. These modifications are persistent between software reloads and system reboots."),(0,a.kt)("p",null,"When the candidate and running configurations do not match (i.e., there are uncommited changes), the PCLI command prompt will include an indicator to let you know:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*admin@labsystem1.fiedler#\n")),(0,a.kt)("p",null,"The initial asterisk character lets you know that there are changes."),(0,a.kt)("h2",{id:"configuration-workflows"},"Configuration Workflows"),(0,a.kt)("p",null,"Unlike many traditional routers, the 128T Networking Platform contains a series of interdependent pieces of configuration \u2013 referred to as our ",(0,a.kt)("em",{parentName:"p"},"data model")," \u2013\xa0to inform its decisions on routing, forwarding, and policy enforcement. These interdependencies mean that the method of working with the 128T may be slightly different than you are accustomed to."),(0,a.kt)("p",null,"The basic premise, as mentioned in the sections that precede this, is that there are two configurations on your 128T at any point in time: the ",(0,a.kt)("em",{parentName:"p"},"running configuration")," and the ",(0,a.kt)("em",{parentName:"p"},"candidate configuration"),". You stage configuration changes in the candidate, and when you have completed your configuration activity, you validate and commit them to the running configuration \u2013 bringing the candidate and running back into unison. From there, you may undertake your next set of configuration changes, etc."),(0,a.kt)("p",null,"This basic workflow (configure, validate, commit) is the fundamental mechanism for effecting change in the behavior of your 128T Networking Platform. Other operations you may be familiar with from other network devices, such as backup/restore, etc., have analogues in the 128T paradigm. You only need to be cognizant of the fact that these backup/restore operations may operate on either of the candidate configuration, the running configuration, or both."),(0,a.kt)("h3",{id:"comparing-configurations"},"Comparing Configurations"),(0,a.kt)("p",null,"To see the changes between the candidate and running configuration, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"compare config")," command within the PCLI. This takes two positional arguments, either of which may be ",(0,a.kt)("inlineCode",{parentName:"p"},"candidate"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"running"),", or the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," of a previously exported configuration. The output for the ",(0,a.kt)("inlineCode",{parentName:"p"},"compare config")," command shows the diffs that exist between the two configurations. The ordering of the arguments is significant; issuing the command ",(0,a.kt)("inlineCode",{parentName:"p"},"compare config running candidate")," will show the changes that have been made to the candidate configuration. The command ",(0,a.kt)("inlineCode",{parentName:"p"},"compare config candidate running")," will show the set of changes that would need to be applied to restore the candidate configuration back to the running configuration. The ",(0,a.kt)("em",{parentName:"p"},"name")," argument identifies a previously exported configuration file to compare against the running, candidate, ",(0,a.kt)("em",{parentName:"p"},"or another exported configuration file.")," This argument allows you to compare configurations ",(0,a.kt)("strong",{parentName:"p"},"without")," having to import the exported config into the candidate config for comparison."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The output of ",(0,a.kt)("inlineCode",{parentName:"p"},"compare config candidate running"),' is formatted such that it can be copied and pasted back into the PCLI, to revert all changes and have the candidate be "reset" to the running configuration. Obviously, you can selectively copy/paste sections of this output back into the PCLI to revert only specific sets of changes. However, care must be taken when doing this, as the configuration is organized in a hierarchy with specific expectations around ',(0,a.kt)("inlineCode",{parentName:"p"},"exit"),"ing configuration blocks."))),(0,a.kt)("h3",{id:"restoring-the-candidate"},"Restoring the Candidate"),(0,a.kt)("p",null,"Akin to copying and pasting the output of ",(0,a.kt)("inlineCode",{parentName:"p"},"compare config candidate running")," back into the PCLI, there is a specific command for reverting the entirety of the candidate configuration back to the running configuration's state. The command ",(0,a.kt)("inlineCode",{parentName:"p"},"restore config running")," will reset the candidate back to the system's runtime configuration."),(0,a.kt)("p",null,'Within the GUI, there is a button in the navigation bar near the top of the window labeled "Revert to Running," which accomplishes this same goal.'),(0,a.kt)("h3",{id:"importexport"},"Import/Export"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"export config")," command to save the candidate or running configuration. It is strongly recommended to frequently save the candidate configuration as a checkpoint for changes to be committed. In earlier releases the candidate configuration was stored on disk and would persist through product reboots. Beginning with 5.3, the candidate configuration is not saved to disk and will not persistent through reboot."),(0,a.kt)("p",null,"The running configuration can be exported as a working configuration, or for replicating the same configuration on another 128T, or for replicating the configuration to another system for archival/auditing. It is a useful practice to export the configuration prior to a system upgrade. The candidate or running configuration is backed up by executing ",(0,a.kt)("inlineCode",{parentName:"p"},"export config candidate <export-name>")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"export config running <export-name>"),"."),(0,a.kt)("p",null,"To import a configuration that has been exported, execute the ",(0,a.kt)("inlineCode",{parentName:"p"},"import config <file-name>"),". Imported configurations are loaded into the candidate config. To apply the imported configuration to the system, a ",(0,a.kt)("strong",{parentName:"p"},"Commit")," operation must be executed for it to become the running config."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"When copying exported configurations onto a 128T platform, the file must be placed in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/128technology/config-exports")," "))))}h.isMDXComponent=!0},55990:function(e,t,n){t.Z=n.p+"assets/images/config_force_regen1-3f99b04677d425053f37f13d9738bc4b.png"},27922:function(e,t,n){t.Z=n.p+"assets/images/config_force_regen2-3b74d217971ce1335c2d15b8dbc0d8fb.png"},65550:function(e,t,n){t.Z=n.p+"assets/images/config_force_regen3-e7613a08cfbd37c3104d4cc468791073.png"}}]);