"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[8968],{16568:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=i(74848),r=i(28453);const o={title:"Border Gateway Protocol (BGP)",sidebar_label:"BGP"},s=void 0,a={id:"config_bgp",title:"Border Gateway Protocol (BGP)",description:"The Border Gateway Protocol (BGP) is a standard exterior gateway protocol developed for exchanging routing and reachability information between Autonomous Systems, a collection of IP routing prefixes managed by a single administrative entity. BGP makes routing decisions based on paths and network policies; although historically mainly seen in service provider networks, it is now gaining acceptance in large enterprise networks. BGP can also be used for routing within an autonomous system as an interior gateway protocol; when doing so it is referred to as iBGP.",source:"@site/docs/config_bgp.md",sourceDirName:".",slug:"/config_bgp",permalink:"/docs/config_bgp",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1711026369,formattedLastUpdatedAt:"Mar 21, 2024",frontMatter:{title:"Border Gateway Protocol (BGP)",sidebar_label:"BGP"},sidebar:"docs",previous:{title:"TCP Session Optimization",permalink:"/docs/config_session_optimization"},next:{title:"VRF Route Leaking",permalink:"/docs/config_vrf_route_leaking"}},c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Peering with non-SSR Routers",id:"peering-with-non-ssr-routers",level:2},{value:"Advertising Routes",id:"advertising-routes",level:2},{value:"Using the <code>network</code> Statement",id:"using-the-network-statement",level:4},{value:"Redistributing Routes",id:"redistributing-routes",level:4},{value:"BGP over SVR (BGPoSVR)",id:"bgp-over-svr-bgposvr",level:2},{value:"Configuration Example:",id:"configuration-example",level:4},{value:"Sample Configuration:",id:"sample-configuration",level:4},{value:"Service-route Mesh For Route Reflector Clients",id:"service-route-mesh-for-route-reflector-clients",level:3},{value:"Version History",id:"version-history",level:4},{value:"Security Policy and Service Policy",id:"security-policy-and-service-policy",level:3},{value:"Version History",id:"version-history-1",level:4},{value:"IPv6 Addressing",id:"ipv6-addressing",level:3},{value:"BGP IPv6 Transport",id:"bgp-ipv6-transport",level:4},{value:"IPv6 Unicast",id:"ipv6-unicast",level:4},{value:"BGP over SVR IPv6",id:"bgp-over-svr-ipv6",level:4},{value:"Troubleshooting",id:"troubleshooting",level:4},{value:"Version History",id:"version-history-2",level:4},{value:"Verifying the BGP Configuration",id:"verifying-the-bgp-configuration",level:3},{value:"BGP over SVR Inter-Hub Steering",id:"bgp-over-svr-inter-hub-steering",level:2},{value:"Configuration",id:"configuration",level:2},{value:"How It Works",id:"how-it-works",level:3},{value:"BGP Conditional Advertisement",id:"bgp-conditional-advertisement",level:3},{value:"Configuration Commands",id:"configuration-commands",level:3},{value:"Troubleshooting",id:"troubleshooting-1",level:2},{value:"VRF BGP Over SVR",id:"vrf-bgp-over-svr",level:2},{value:"Configuration Example",id:"configuration-example-1",level:3},{value:"BGP Service Generation",id:"bgp-service-generation",level:4},{value:"Routing-Stack Service-Route",id:"routing-stack-service-route",level:4},{value:"Generated Services and Tenants",id:"generated-services-and-tenants",level:4},{value:"Troubleshooting",id:"troubleshooting-2",level:3},{value:"BGP Conditional Advertisement",id:"bgp-conditional-advertisement-1",level:2},{value:"Configuration",id:"configuration-1",level:3},{value:"Example Configuration",id:"example-configuration",level:3},{value:"Known Limitations",id:"known-limitations",level:3},{value:"Show Commands",id:"show-commands",level:3},{value:"BGP Graceful Restart",id:"bgp-graceful-restart",level:2},{value:"Show Command and Troubleshooting",id:"show-command-and-troubleshooting",level:3},{value:"Routing Features",id:"routing-features",level:2},{value:"Configuring SSR as a Route Reflector",id:"configuring-ssr-as-a-route-reflector",level:3},{value:"BGP Confederations",id:"bgp-confederations",level:3}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The Border Gateway Protocol (BGP) is a standard exterior gateway protocol developed for exchanging routing and reachability information between Autonomous Systems, a collection of IP routing prefixes managed by a single administrative entity. BGP makes routing decisions based on paths and network policies; although historically mainly seen in service provider networks, it is now gaining acceptance in large enterprise networks. BGP can also be used for routing within an autonomous system as an interior gateway protocol; when doing so it is referred to as iBGP."}),"\n",(0,t.jsx)(n.p,{children:'Learning routes from BGP simplifies enterprise configuration and integration with Secure Vector Routing. In this configuration guide we will also discuss a SSR-specific feature referred to as "BGP over SVR" (or BGPoSVR), which combines the power of Secure Vector Routing with the rich feature set of the BGP protocol.'}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.p,{children:["This section presumes that you have a running SSR system and wants to add configuration to support BGP. The running SSR system should already include configuration for basic platform functionality (e.g., ",(0,t.jsx)(n.code,{children:"router"}),", ",(0,t.jsx)(n.code,{children:"node"}),", ",(0,t.jsx)(n.code,{children:"device-interface"}),", ",(0,t.jsx)(n.code,{children:"network-interface"}),") and basic SSR modeling configuration (e.g., tenants, services, etc.). Refer to the ",(0,t.jsx)(n.a,{href:"/docs/config_reference_guide",children:"Element Reference"})," section of our documentation for a better understanding about basics of the SSR data model."]}),"\n",(0,t.jsx)(n.h2,{id:"peering-with-non-ssr-routers",children:"Peering with non-SSR Routers"}),"\n",(0,t.jsxs)(n.p,{children:["The BGP configuration exists in the ",(0,t.jsx)(n.a,{href:"/docs/config_reference_guide#routing-per-router",children:(0,t.jsx)(n.code,{children:"routing"})})," configuration container within the SSR data model. For any routing configuration, static or dynamic, a default routing instance called ",(0,t.jsx)(n.code,{children:"default-instance"})," must be defined in the SSR configuration."]}),"\n",(0,t.jsx)(n.p,{children:"In this example we will assume that BGP is configured on the peering router with IP address 1.1.1.1, as autonomous system number (ASN) 6000."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"To peer the SSR with this router, configure BGP on our SSR using the following commands:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# config auth\nadmin@branchoffice1.seattlesite1 (authority)# router seattlesite1 \nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Every SSR router (in this case, the router named ",(0,t.jsx)(n.code,{children:"seattlesite1"}),"), contains all of its legacy routing protocol information within the ",(0,t.jsx)(n.code,{children:"default-instance"})," routing container."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing-protocol bgp\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Enter into the BGP portion of the routing configuration model; set the local autonomous system number to 100, and set the router ID to 1.1.1.128."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# local-as 100\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# router-id 1.1.1.128\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Configure the ",(0,t.jsx)(n.code,{children:"address-family"})," using ",(0,t.jsx)(n.code,{children:"ipv4-unicast"}),". At least one ",(0,t.jsx)(n.code,{children:"address-family"}),"must be configured, and typically is set as ",(0,t.jsx)(n.code,{children:"ipv4-unicast"}),". If your deployment uses other address families (e.g., IPv6) or routes multicast, you may also need to configure support for other address families."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\n"})}),"\n",(0,t.jsx)(n.p,{children:'Address families are also sometimes referred to as "AFI-SAFI" (pronounced "affy-saffy"), which is an Address Family Indicator plus Sub-Address Family Indicator.'}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["Configure the ",(0,t.jsx)(n.code,{children:"neighbor"}),". In the example here, we've identified its IP address as ",(0,t.jsx)(n.code,{children:"1.1.1.1"})," and its ASN as 6000. (Because this neighbor has a different ASN than the SSR, the SSR will recognize it as an eBGP peer rather than an iBGP peer.) An ",(0,t.jsx)(n.code,{children:"address-family"})," of ",(0,t.jsx)(n.code,{children:"ipv4-unicast"}),", lets the SSR know to exchange IPv4 unicast routes with the peer."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# neighbor 1.1.1.1\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# neighbor-as 6000\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# next-hop-self true\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])#exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# exit\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsxs)(n.li,{children:["Set ",(0,t.jsx)(n.code,{children:"next-hop-self"})," to ",(0,t.jsx)(n.code,{children:"true."})," During advertisement, non-directly connected routers need to learn how to reach an advertised route. To provide this information to the non-directly connected (as well as iBGP peers), next-hop-self command is used. This will cause the SSR to rewrite the ",(0,t.jsx)(n.code,{children:"next-hop"})," information in the routes it advertises to this peer to be its own address."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["In the example above, we've set our router's AS to 100. This will apply to all neighbors as the \"default\" AS it will advertise. You can override this on a per-neighbor basis by setting ",(0,t.jsx)(n.code,{children:"local-as"})," within the ",(0,t.jsx)(n.code,{children:"neighbor"})," configuration to a different value. However, ",(0,t.jsx)(n.em,{children:"you must not configure the same value within the neighbor as you've already set in your global configuration"}),". This may cause issues when attempting to establish a peering relationship."]})}),"\n",(0,t.jsxs)(n.ol,{start:"6",children:["\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"exit"})," command several times to return to the ",(0,t.jsx)(n.code,{children:"routing-protocol"})," level of the configuration hierarchy, and issue the ",(0,t.jsx)(n.code,{children:"show"})," command. Your configuration should look something like this:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# show\ntype bgp\nlocal-as 100\nrouter-id 1.1.1.128\n\naddress-family  ipv4-unicast\n    afi-safi  ipv4-unicast\nexit\n\nneighbor        1.1.1.1\n    neighbor-address  1.1.1.1\n    neighbor-as       6000\n    shutdown          false\n    \n    address-family    ipv4-unicast\n        afi-safi      ipv4-unicast\n        next-hop-self true\n    exit\nexit\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advertising-routes",children:"Advertising Routes"}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to advertise routes into BGP:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using ",(0,t.jsx)(n.code,{children:"network"})," statements to identify the prefixes you want to advertise"]}),"\n",(0,t.jsx)(n.li,{children:"Redistributing routes learned through other IGP or from configuration"}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"using-the-network-statement",children:["Using the ",(0,t.jsx)(n.code,{children:"network"})," Statement"]}),"\n",(0,t.jsx)(n.p,{children:"To advertise routes to BGP, configure the network to be advertised under the address-family of the router. You may also apply a policy to the advertised route using  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tcommand."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["You can apply policies to these routes (i.e., policy and filters) individually. Policies are configured within the authority-level ",(0,t.jsx)(n.code,{children:"routing"})," configuration at ",(0,t.jsx)(n.code,{children:"config > authority > routing > filter"})," and ",(0,t.jsx)(n.code,{children:"config > authority > routing > policy"}),". For more information, refer to the section in our documentation on Filters and Policies."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"**admin@branchoffice1.seattlesite1# config auth\n admin@branchoffice1.seattlesite1 (authority)# router seattlesite1\n admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\n admin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing-protocol bgp\n admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# address- family ipv4-unicast\n admin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# network 172.16.255.0/30\n admin@branchoffice1.seattlesite1 (network[network- address=172.16.255.0/30])# policy allow\n admin@branchoffice1.seattlesite1 (network[network- address=172.16.255.0/30])# exit**\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example we're advertising the CIDR ",(0,t.jsx)(n.code,{children:"172.16.255.0/30"}),", and it will use the global route policy named ",(0,t.jsx)(n.code,{children:"allow"})," (not shown)."]}),"\n",(0,t.jsx)(n.h4,{id:"redistributing-routes",children:"Redistributing Routes"}),"\n",(0,t.jsxs)(n.p,{children:["To redistribute connected, static, service routes and/or routes learned through OSPF, you can use the ",(0,t.jsx)(n.code,{children:"redistribute"})," configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# config auth\nadmin@branchoffice1.seattlesite1 (authority)# router seattlesite1\nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing-protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# redistribute connected\n"})}),"\n",(0,t.jsx)(n.h2,{id:"bgp-over-svr-bgposvr",children:"BGP over SVR (BGPoSVR)"}),"\n",(0,t.jsx)(n.p,{children:"Use BGP over SVR when peering with an SSR to gain the benefit of Secure Vector Routing for all BGP traffic flowing to-and-from the SSR peers."}),"\n",(0,t.jsx)(n.p,{children:"This procedure assumes that the SSR system is configured for basic platform functionality. Refer to the configuration example below for context."}),"\n",(0,t.jsx)(n.p,{children:"To configure BGP over SVR:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Configure a ",(0,t.jsx)(n.em,{children:"routing interface"}),". This is similar to a loopback interface on traditional routers.\nUnlike normal loopback BGP peering, this IP address does not need to be routable on the transport network because it will never see the wire. BGP peering is created on this interface. The conductor triggers on this and autogenerates the following components to activate BGP over SVR:"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"bgp_speaker"})," tenant"]}),"\n",(0,t.jsx)(n.li,{children:"Auto-generated BGP services and service routes"}),"\n",(0,t.jsx)(n.li,{children:"Router Peers"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These BGP connections are protected by SVR, and able to migrate between SVR paths."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"You must use a conductor to configure BGP over SVR; manually configuring the various pieces between two routers is not supported."})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If the interface facing the BGPoSVR peer is already part of a neighborhood, then ensure that the two routers' interface topology types (",(0,t.jsx)(n.code,{children:"network-interface >neighborhood > topology"}),") are configured allowing the routers to form peering relationships for the auto-generated peer service routes; e.g., mesh-mesh, mesh-hub, mesh-spoke or hub-spoke."]})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Configure a BGP instance with the router\u2019s local AS and a router-id that matches the routing interface's IP. For each BGP over SVR peer, use a neighbor address of the neighbor's routing interface IP address."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Configure the BGP peer configuration options such as the timers and address families. In address-family IPv4-unicast, ",(0,t.jsx)(n.code,{children:"next-hop-self"})," must be set to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["When configuring BGPoSVR with an eBGP peer, you must set ",(0,t.jsx)(n.code,{children:"multihop ttl"})," to at least ",(0,t.jsx)(n.code,{children:"2"}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"configuration-example",children:"Configuration Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"config\n    authority\n    router myRouter\n        routing default-instance\n            type default-instance\n            interface rtg-int\n                name rtg-int\n                ip-address <myAddress>\n            exit\n            routing-protocol bgp\n                type bgp\n                local-as 100\n                router-id <myAddress>\n                neighbor <theirAddress>\n                neighbor-as 200\n                timers\n                    hold-time 9\n                    keepalive-interval 3\n                exit\n                address-family ipv4-unicast\n                    afi-safi ipv4-unicast\n                    next-hop-self true\n                exit\n                transport\n                    local-address\n                        routing-interface rtg-int\n                    exit\n                exit\n                multihop\n                    ttl 255\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,t.jsx)(n.h4,{id:"sample-configuration",children:"Sample Configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# config auth\nadmin@branchoffice1.seattlesite1 (authority)# router seattlesite1\nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# interface bgp-int-seattle\nadmin@branchoffice1.seattlesite1 (interface[name=bgp-int-seattle])# ip- address 10.128.128.2\nadmin@branchoffice1.seattlesite1 (interface[name=bgp-int-seattle])# exit\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing- protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# local-as 100\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# router-id 10.128.128.2\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# address- family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# neighbor 10.128.128.1\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# neighbor-as 300\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# next-hop-self true\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# transport\nadmin@branchoffice1.seattlesite1 (transport)# local-address\nadmin@branchoffice1.seattlesite1 (local-address)# routing-interface bgp-int-seattle\nadmin@branchoffice1.seattlesite1 (local-address)# exit\nadmin@branchoffice1.seattlesite1 (transport)# exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# multihop\nadmin@branchoffice1.seattlesite1 (multihop)# ttl 255\nadmin@branchoffice1.seattlesite1 (multihop)# exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# exit\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# exit\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# exit\nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# exit\nadmin@branchoffice1.seattlesite1 (authority)# exit\nadmin@branchoffice1.seattlesite1#\n"})}),"\n",(0,t.jsx)(n.h3,{id:"service-route-mesh-for-route-reflector-clients",children:"Service-route Mesh For Route Reflector Clients"}),"\n",(0,t.jsx)(n.p,{children:"Use this option to generate a full-mesh BGP over SVR configuration, where all spokes learn the routes from other spokes via the reflector. In this configuration, the hub is a route reflector and all spokes are SVR peers, having been placed in the same mesh neighborhood. The BGP next hop is the originating spoke, and traffic is passed via SVR directly between the spokes."}),"\n",(0,t.jsx)(n.p,{children:"To use this feature, the following configuration must be in place:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["BGP must be configured with one or more route reflectors.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["On the router to be used as a route reflector, configure ",(0,t.jsx)(n.code,{children:"routing-protocol bgp neighbor <ip-addr> address-family ipv4-unicast route-reflector client  true"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"The route-reflector is configured to connect via BGP over SVR to multiple clients."}),"\n",(0,t.jsx)(n.li,{children:"The route-reflector clients are configured to have a full mesh of SVR peering relationships with each other - this is done by putting them all in the same mesh neighborhood."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["After verifying the router configurations are correct, use the GUI or the pcli to set ",(0,t.jsx)(n.code,{children:"route-reflector-client-mesh"})," to ",(0,t.jsx)(n.code,{children:"true"}),". The conductor then generates the service-routes to allow direct SVR communication between the clients, based on the BGP routes they learn from each other via the reflector."]}),"\n",(0,t.jsx)(n.h4,{id:"version-history",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Release"}),(0,t.jsx)(n.th,{children:"Modification"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"6.1.0"}),(0,t.jsx)(n.td,{children:"This feature was introduced."})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"security-policy-and-service-policy",children:"Security Policy and Service Policy"}),"\n",(0,t.jsx)(n.p,{children:"The Security and Service Policy configuration options are provided for specifying the policy to be used for generated BGP-over-SVR services."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"BGP Service Generation Settings",src:i(96049).A+"",width:"1878",height:"562"})}),"\n",(0,t.jsx)(n.p,{children:"To access these settings from the pcli:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"config\n    authority\n        bgp-service-generation\n        security-policy                 internal\n        service-policy                  prefer-path1\n        route-reflector-client-mesh     true\n        exit\n    exit\nexit\n"})}),"\n",(0,t.jsx)(n.h4,{id:"version-history-1",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Release"}),(0,t.jsx)(n.th,{children:"Modification"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"6.1.0"}),(0,t.jsx)(n.td,{children:"This feature was introduced."})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"ipv6-addressing",children:"IPv6 Addressing"}),"\n",(0,t.jsx)(n.p,{children:"The SSR supports BGP using IPv6 addressing. IPv6 can be used alone, combined with IPv4, or IPv4 can continue to be used without IPv6. The functionality is broken out as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"BGP IPv6 transport \u2013 BGP neighbors configured with IPv6 addresses"}),"\n",(0,t.jsx)(n.li,{children:"BGP IPv6 unicast address family \u2013 BGP instances and neighbors support IPv6 unicast and IPv4 unicast"}),"\n",(0,t.jsx)(n.li,{children:"BGP over SVR IPv6"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bgp-ipv6-transport",children:"BGP IPv6 Transport"}),"\n",(0,t.jsxs)(n.p,{children:["The command ",(0,t.jsx)(n.code,{children:"routing-protocol bgp neighbor-address"})," accepts either an IPv4 or IPv6 address."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"routing-protocol bgp neighbor fc00::3 \n"})}),"\n",(0,t.jsx)(n.h4,{id:"ipv6-unicast",children:"IPv6 Unicast"}),"\n",(0,t.jsxs)(n.p,{children:["The commands ",(0,t.jsx)(n.code,{children:"routing-protocol bgp address-family"})," and ",(0,t.jsx)(n.code,{children:"routing-protocol bgp neighbor address-family"})," now accept ipv6-unicast and ipv4-unicast addresses."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"routing-protocol bgp address-family ipv6-unicast  \nrouting-protocol bgp neighbor fc00::3 address-family ipv6-unicast \n"})}),"\n",(0,t.jsx)(n.p,{children:"Any combination of address families can be configured on a BGP instance or BGP neighbor.\xa0 The neighbor IP address does not influence the neighbor address family configuration. IPv4 is the default address family; in situations where only IPv6 is or will be used for the neighbor, disable IPv4 using the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"routing-protocol bgp neighbor <> address-family ipv4-unicast activate false  \n"})}),"\n",(0,t.jsxs)(n.p,{children:["BGP protocol redistribution is address family specific. The command ",(0,t.jsx)(n.code,{children:"routing-protocol bgp redistribute"})," applies to the ipv4-unicast address family only. Use the following command for IPv6 unicast redistribution:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"routing-protocol bgp address-family ipv6-unicast redistribute static\n"})}),"\n",(0,t.jsx)(n.p,{children:"Service addresses can be distributed into both the IPv4 and IPv6 unicast address families."}),"\n",(0,t.jsx)(n.h4,{id:"bgp-over-svr-ipv6",children:"BGP over SVR IPv6"}),"\n",(0,t.jsx)(n.p,{children:"An IPv6 address can be configured on a routing interface. The restriction of a single IP address per routing interface remains, but support for multiple routing interfaces is provided."}),"\n",(0,t.jsx)(n.p,{children:"To auto-generate BGP over SVR IPv6 services:\nConfigure the IP address of the remote routing interface for the neighbor, and set the neighbor transport to use a local routing interface."}),"\n",(0,t.jsx)(n.p,{children:"IPv4 and IPv6  BGP over SVR peering sessions can be mixed, including connecting to the same peer with both an IPv4 and IPv6 address; however, the local routing interfaces must have the same IP address types as any remote IP BGP over SVR addresses."}),"\n",(0,t.jsx)(n.h4,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.p,{children:"Use the following show commands to gather route, alarm, event, and log information."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"show bgp ipv6 <route>"}),": Displays IPv6 specific routes.\n(add example here)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"show bgp neighbors <addr> received-routes | advertised-routes [<family>]"}),"\nThe valid values for ",(0,t.jsx)(n.code,{children:"family"})," include ",(0,t.jsx)(n.code,{children:"all      ipv4     ipv4-vpn ipv6     ipv6-vpn"}),"\n(add example here)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"show bgp summary [<family>]"}),(0,t.jsx)(n.br,{}),"\n","The valid values for ",(0,t.jsx)(n.code,{children:"family"})," include ",(0,t.jsx)(n.code,{children:"all      ipv4     ipv4-vpn ipv6     ipv6-vpn"}),"\n(add example here)"]}),"\n",(0,t.jsx)(n.p,{children:"The remaining PCLI BGP commands are not address family specific."}),"\n",(0,t.jsx)(n.h4,{id:"version-history-2",children:"Version History"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Release"}),(0,t.jsx)(n.th,{children:"Modification"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"6.2.0"}),(0,t.jsx)(n.td,{children:"This feature was introduced."})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"verifying-the-bgp-configuration",children:"Verifying the BGP Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"show bgp"})," to see the overview of the BGP routing process on the SSR:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# show bgp\nWed 2019-02-20 23:14:58 UTC\nBGP table version is 12, local router ID is 10.128.128.2, vrf id 0\nStatus codes:  s suppressed, d damped, h history, * valid, > best, = multipath,\n               i internal, r RIB-failure, S Stale, R Removed\nNexthop codes: @NNN nexthop's vrf id, < announce-nh-self\nOrigin codes:  i - IGP, e - EGP, ? - incomplete\n\n   Network          Next Hop            Metric LocPrf Weight Path\n   10.128.128.2/32  10.128.128.3                           0 200 300 ?\n   10.128.128.3/32  10.128.128.3                           0 200 300 ?\n   128.128.128.1/32 10.128.128.3                           0 200 300 ?\n   128.128.128.128/32\n                    10.128.128.3                           0 200 300 ?\n   172.16.128.2/32  10.128.128.3                           0 200 300 ?\n   172.16.255.0/30  0.0.0.0                  0         32768 i\n   172.26.128.0/30  10.128.128.3                           0 200 300 i\n\nDisplayed  7 routes and 7 total paths\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In addition to the output from ",(0,t.jsx)(n.code,{children:"show bgp"}),", the contributions to the RIB from BGP are visible in the output of ",(0,t.jsx)(n.code,{children:"show rib"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# show rib\nWed 2019-02-20 23:04:20 UTC\nCodes: K - kernel route, C - connected, S - static, R - RIP,\n       O - OSPF, I - IS-IS, B - BGP, P - PIM, T - Table, v - VNC,\n       V - VNC-Direct,\n       > - selected route, * - FIB route\n\nB   1.1.1.0/24 [20/0] via 1.1.1.1 inactive, 22:28:18\nC>* 1.1.1.0/24 is directly connected, g4\nB>* 2.2.2.0/24 [20/0] via 1.1.1.1, g4, 22:28:18\nB>* 3.3.3.0/24 [20/0] via 1.1.1.1, g4, 22:28:18\nC>* 10.0.128.0/31 is directly connected, g1\nK>* 128.128.128.1/32 is directly connected, Null0, bh\nK>* 128.128.128.128/32 is directly connected, Null0, bh\nC>* 169.254.127.126/31 is directly connected, g4294967294\nS>* 172.16.128.2/32 [1/0] via 10.0.128.1, g1\nK   172.16.128.2/32 is directly connected, Null0, bh\nK>* 172.26.128.2/32 is directly connected, Null0, bh\nC>* 192.168.64.0/24 is directly connected, g2\n\n\nCompleted in 0.09 seconds\nadmin@branchoffice1.seattlesite1#\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["As shown in the header, the routes that start with ",(0,t.jsx)(n.strong,{children:"B"})," are contributed by BGP."]})}),"\n",(0,t.jsx)(n.h2,{id:"bgp-over-svr-inter-hub-steering",children:"BGP over SVR Inter-Hub Steering"}),"\n",(0,t.jsx)(n.p,{children:"Path based BGP over SVR Routing responds to changes in peer adjacency, operational status, or SLA. It adds the ability to select and advertise BGP routes between BGP over SVR neighbors. It does this by monitoring the peer paths between BGP over SVR peers and dynamically adjusting the BGP neighbor inbound and outbound policy on those peers to reflect the priority and SLA of the peer paths."}),"\n",(0,t.jsx)(n.p,{children:"In an SVR hub and spoke topology where a spoke connects to more than one hub router, it may be desirable to align service-policy based peer-path selection (between spoke and the hubs) with the BGP next-hop selection. The BGP next-hop (i.e. hub) that the spoke selects should correspond to the best available peer-path at any time."}),"\n",(0,t.jsxs)(n.p,{children:["The user configures the service-policy which provides the criteria for picking the best path. With this information, the BGP neighbors are prioritized. To ensure that BGP uses the best path, we configure the ",(0,t.jsx)(n.code,{children:"action set-path-based-as-path prepend"})," to an AS path, which is a sequence of AS numbers. The prepend value is applied to BGP routes matched by the policy, making the BGP route AS path longer and thus less preferred. This forces BGP over a particular path, based on the path quality requirements."]}),"\n",(0,t.jsx)(n.p,{children:'However, in cases where failover or connection issues force the use of a less desirable path, the software will recognize the (lesser) path as "in use" and will not prepend the AS-path. When the path returns to the best path, the value is prepended to the less desirable path.'}),"\n",(0,t.jsxs)(n.p,{children:["This changes dynamically over time: If the preferred path (based on the ",(0,t.jsx)(n.code,{children:"service-policy"}),") changes, the system adjusts the routing policy on the fly. The same criteria is applied to any changes to the path choice."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The following configuration process assumes that we are starting with a BGP over SVR configuration that has multiple BGP over SVR neighbors."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Configure the network interface neighborhoods so that each SVR adjacency is identified by a unique vector. If a particular network interface has multiple adjacencies, configure multiple neighborhoods on that interface."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"router hub1\n\n\n        network-interface mpls \n            neighborhood mpls-hub1-spoke \n             vector mpls-hub1-spoke\n         exit\n\n        network-interface lte \n            neighborhood lte-hub1-spoke \n            vector lte-hub1-spoke \n        exit\n    exit\n\nrouter hub2\n\n\n        network-interface mpls \n            neighborhood mpls-hub2-spoke \n             vector mpls-hub2-spoke\n         exit\n\n        network-interface lte \n            neighborhood lte-hub2-spoke \n            vector lte-hub2-spoke \n        exit\n    exit\n\n\nrouter spoke1\n\n\n        network-interface mpls \n            neighborhood mpls-hub1-spoke \n             vector mpls-hub1-spoke\n         exit\n\n        network-interface mpls \n            neighborhood mpls-hub2-spoke \n             vector mpls-hub2-spoke \n        exit\n    exit\n\n        network-interface lte \n            neighborhood lte-hub1-spoke \n            vector lte-hub1-spoke \n        exit\n\n        network-interface lte \n            neighborhood lte-hub2-spoke \n            vector lte-hub2-spoke\n        exit\n    exit\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Configure a service policy that maps the adjacency vectors to a priority."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"service-policy prefer-mpls-hub1 \n    vector mpls-hub1-spoke \n    priority 1\n    exit\nservice-policy prefer-mpls-hub1 \n    vector mpls-hub2-spoke \n    priority 2\n    exit\nservice-policy prefer-mpls-hub1 \n    vector lte-hub1-spoke \n    priority 3\n    exit\nservice-policy prefer-mpls-hub1 \n    vector lte-hub2-spoke \n    priority 4\n    exit\nexit\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Configure a routing policy that includes the new routing policy ",(0,t.jsx)(n.code,{children:"set-path-based-as-path"})," action. See ",(0,t.jsx)(n.a,{href:"#configuration-commands",children:"Configuration Commands"})," below for additional information."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"policy spoke-to-hub  \n    statement 1\n        action set-path-based-as-path \n            type             set-path-based-as-path\n            prepend          65000\n            service-policy   prefer-mpls-hub1 \n        exit\n    exit\nexit\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Configure the BGP over SVR neighbor policies: Inbound and Outbound policies are configured on the spoke to select a BGP route containing the hub with the most preferred adjacency."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"router spoke \n    routing default-instance \n        routing-protocol bgp \n        neighbor <hub1> \n            neighbor-policy inbound-policy spoke-to-hub\n        exit\n    exit\n\nrouter spoke \n    routing default-instance \n        routing-protocol bgp \n        neighbor <hub1> \n            neighbor-policy outbound-policy spoke-to-hub\n        exit\n\nrouter spoke \n     routing default-instance \n        routing-protocol bgp \n        neighbor <hub2> \n            neighbor-policy inbound-policy spoke-to-hub\n        exit\n\nrouter spoke \n    routing default-instance \n        routing-protocol bgp \n        neighbor <hub2> \n            neighbor-policy outbound-policy spoke-to-hub \n        exit\n    exit\nexit\n"})}),"\n",(0,t.jsx)(n.p,{children:"The service policy in the new routing policy path-based action determines the best BGP peer using the adjacency vectors. Per peer routing policies are dynamically modified as the best paths to the BGP over SVR neighbors change."}),"\n",(0,t.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.p,{children:["On the spoke, the best adjacency is to ",(0,t.jsx)(n.code,{children:"hub1"})," (via mpls1). The BGP ",(0,t.jsx)(n.code,{children:"hub1"})," inbound policy uses the primary routing policy which has no ",(0,t.jsx)(n.code,{children:"as-path prepend"}),". The BGP ",(0,t.jsx)(n.code,{children:"hub2"})," inbound policy uses the shadow inbound policy that sets an ",(0,t.jsx)(n.code,{children:"as-path prepend"})," making the received routes less preferred."]}),"\n",(0,t.jsxs)(n.p,{children:["When the adjacency from spoke to ",(0,t.jsx)(n.code,{children:"hub1"})," over mpls goes down, the best adjacency is now ",(0,t.jsx)(n.code,{children:"hub2"})," (via mpls2). The ",(0,t.jsx)(n.code,{children:"hub1"})," inbound policy changes to use the shadow, and the ",(0,t.jsx)(n.code,{children:"hub2"})," inbound policy uses the primary. Route updates from ",(0,t.jsx)(n.code,{children:"hub2"})," are now preferred."]}),"\n",(0,t.jsx)(n.h3,{id:"bgp-conditional-advertisement",children:"BGP Conditional Advertisement"}),"\n",(0,t.jsx)(n.p,{children:"Path-based BGP can be used in combination with BGP conditional advertisement. Path-based BGP sets the BGP selected route using the inbound policy. BGP conditional advertisement only considers the BGP selected route. BGP conditional advertisement will always override the neighbor outbound policy. If a BGP prefix matches both the BGP outbound policy and the BGP conditional advertisement advertise-policy, the conditional advertisement takes precedence."}),"\n",(0,t.jsx)(n.h3,{id:"configuration-commands",children:"Configuration Commands"}),"\n",(0,t.jsxs)(n.p,{children:["The configuration for ",(0,t.jsx)(n.code,{children:"set-path-based-as-path"})," is performed under the routing policy, as an action within a statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"action set-path-based-as-path \n    type             set-path-based-as-path\n    prepend          <as-path> \n    service-policy   <service-policy-name>\n"})}),"\n",(0,t.jsx)(n.p,{children:"In context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"authority\n    routing\n        policy spoke-to-hub\n            name spoke-to-hub\n\n            statement  s0\n                name    s0\n                policy  accept\n\n                action  set-path-based-as-path\n                    type            set-path-based-as-path\n                    prepend         65001\n                    service-policy  prefer-mpls-hub1\n                exit\n            exit\n        exit\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting-1",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["The PCLI command ",(0,t.jsx)(n.code,{children:"show bgp path-based-policy"})," displays the current best peer for each group of peers sharing the same service policy. Information includes the last time the best peer changed for the group, and the number of times the best peer changed. The current ",(0,t.jsx)(n.code,{children:"show bgp"})," commands, along with the ",(0,t.jsx)(n.code,{children:"show peers"})," and logging messages can also help debug this feature."]}),"\n",(0,t.jsxs)(n.p,{children:["The following is an example output from ",(0,t.jsx)(n.code,{children:"show bgp path-based-policy"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@node0.02000101ffc5# show bgp path-based-policy\nMon 2023-06-26 19:24:04 UTC\n\\u2714 Getting BGP path-based-policy information...\n\n========================= ============= ============= =================== ==============\n Routing Policy            Num Changes   Last Change   Service Policy      Primary Peer\n========================= ============= ============= =================== ==============\n prefer_wan2-from-hub                1   13s           prefer_wan2-s0-sp   hub2\n prefer_wan2-towards-hub             1   13s           prefer_wan2-s0-sp   hub2\n\nSuccessfully retrieved BGP path-based-policy information.\nCompleted in 0.19 seconds\n\n\nadmin@node0.02000101ffc5# show bgp path-based-policy detail\nMon 2023-06-26 19:24:10 UTC\n\\u2714 Getting BGP path-based-policy information...\n\n============================================================\n Information\n============================================================\n Path Based Policy:\n   Peers:                        hub1, hub2\n   Time Since Update Millisec:   18976\n   Routing Policy:               prefer_wan2-from-hub\n   Service Policy:\n     Primary Peers:              hub2\n     Policy:                     prefer_wan2-s0-sp\n   Changes:                      1\n Path Based Policy:\n   Peers:                        hub1, hub2\n   Time Since Update Millisec:   18949\n   Routing Policy:               prefer_wan2-towards-hub\n   Service Policy:\n     Primary Peers:              hub2\n     Policy:                     prefer_wan2-s0-sp\n   Changes:                      1\n\nSuccessfully retrieved BGP path-based-policy information.\nCompleted in 0.04 seconds\n"})}),"\n",(0,t.jsx)(n.h2,{id:"vrf-bgp-over-svr",children:"VRF BGP Over SVR"}),"\n",(0,t.jsx)(n.p,{children:"The establishment of a BGP session over SVR is achieved by the conductor auto-generating the necessary services and service-routes. The introduction of the VRF feature allows for configuring BGP instances within a VRF, and establishing BGP sessions with neighbors within the same VRF."}),"\n",(0,t.jsx)(n.p,{children:"When configuring VRFs, there can be multiple BGP instances configured on one router, each one expecting to communicate via a separate VRF routing table. The result is that the generated routing-stack service-route needs to indicate which VRF table to direct the BGP session to."}),"\n",(0,t.jsx)(n.p,{children:"By explicitly disabling the auto-generation of BGP services and service-routes for any configured BGP neighbor, it is possible to establish BGP sessions that use routing interfaces (aka \u201cloopback\u201d interfaces) for communication without also using SVR."}),"\n",(0,t.jsx)(n.p,{children:"Other supported use cases include the ability to establish BGP over SVR sessions with each side residing in a different VRF. The typical scenario is a VPN architecture where one router is a CPE device on a customer site without any explicit VRF configuration. It connects to another router at the VPN provider which has a VRF configured for this customer and a BGP instance inside that VRF:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"BGP Instance inside VRF",src:i(73310).A+"",width:"990",height:"528"})}),"\n",(0,t.jsx)(n.p,{children:"In this example, the BGP instance configured in the default VRF on a CPE router needs to establish a session with a VRF BGP instance in the VPN provider\u2019s router. To enable the generation of appropriate BGP service and service-route configuration objects, and in cases where the VRF's have overlapping address space, some additional BGP neighbor configuration is required."}),"\n",(0,t.jsx)(n.h3,{id:"configuration-example-1",children:"Configuration Example"}),"\n",(0,t.jsxs)(n.p,{children:["The following example is based on the VPN provider scenario illustrated above: ",(0,t.jsx)(n.strong,{children:"router A"})," (the VPN Provider) represents a core router with a BGP instance inside a VRF peered with ",(0,t.jsx)(n.strong,{children:"router B\u2019s"})," (Customer Y) BGP instance inside the default VRF."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"authority\n    router A\n        routing default-instance\n            vrf vrfA\n                interface loopback-vrfA\n                    ip-address 10.0.0.10\n                exit\n                routing-protocol bgp\n                    local-as 500\n                    router-id 10.0.0.10\n                    neighbor 10.0.0.11\n                        neighbor-as 500\n                        transport\n                            bgp-service-generation\n                                neighbor-vrf default\n                            exit\n                            local-address\n                                routing-interface loopback-vrfA\n                            exit\n                        exit\n                    exit\n                exit\n            exit\n        exit\n    exit\n    router B\n        routing default-instance\n            interface loopback\n                 ip-address 10.0.0.11\n            exit\n            routing-protocol bgp\n                local-as 500\n                router-id 10.0.0.11\n                neighbor 10.0.0.10\n                    neighbor-as 500\n                    transport\n                        bgp-service-generation\n                            neighbor-vrf vrfA\n                        exit\n                        local-address\n                            routing-interface loopback\n                        exit\n                    exit\n                exit\n            exit\n        exit\n    exit\nexit\n\n"})}),"\n",(0,t.jsx)(n.h4,{id:"bgp-service-generation",children:"BGP Service Generation"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"bgp-service-generation"})," configuration object is available in a BGP neighbor\u2019s ",(0,t.jsx)(n.code,{children:"transport"})," settings. For neighbors specified in the default routing instance or specified inside a VRF, the following choices are available:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"disabled\u2028"}),": Do not generate BGP service or service-routes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"neighbor-vrf (<vrf-name>|default)\u2028"}),": Name of the neighbor\u2019s VRF in which the peer BGP instance resides. Can be \u201cdefault\u201d to specify the default VRF."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"same-neighbor-vrf\u2028"}),": (Default) Generate the BGP service if there is a matching peer with a BGP instance within the same VRF. Explicitly specifying this is equivalent to not configuring any ",(0,t.jsx)(n.code,{children:"bgp-service-generation"})," statement."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"routing-stack-service-route",children:"Routing-Stack Service-Route"}),"\n",(0,t.jsxs)(n.p,{children:["A service-route of type ",(0,t.jsx)(n.code,{children:"routing-stack"})," can be directed to a specific VRF:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"authority\n    router\n        service-route <service-route-name>\n            service-name <service-name>\n            routing-stack\n            routing-stack-vrf <vrf-name>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The existing ",(0,t.jsx)(n.code,{children:"routing-stack"})," statement directs the session into the ",(0,t.jsx)(n.code,{children:"routingEngine"})," network namespace used by the routing engine. The optional ",(0,t.jsx)(n.code,{children:"routing-stack-vrf <vrf-name>"})," statement specifies the desired VRF within the ",(0,t.jsx)(n.code,{children:"routingEngine"})," namespace. The ",(0,t.jsx)(n.code,{children:"vrf-name"})," parameter is a reference to an existing VRF in the same router. If no ",(0,t.jsx)(n.code,{children:"routing-stack-vrf"})," is specified, the target of the service-route is the default VRF."]}),"\n",(0,t.jsxs)(n.p,{children:["Service-routes of type ",(0,t.jsx)(n.code,{children:"routing-stack"})," are automatically generated by the conductor for use with an auto-generated BGP service. Manually creating this type of service-route is not supported."]}),"\n",(0,t.jsx)(n.h4,{id:"generated-services-and-tenants",children:"Generated Services and Tenants"}),"\n",(0,t.jsx)(n.p,{children:"More than one access-policy can be specified in a service; a service is generated for each unique routing-interface and VRF tuple for a given router. Because multiple peering relationships may exist using that service, the access-policy lists all tenants associated with the BGP neighbors using that service for peering. All tenants used in these access-policy statements appear as generated tenants in the configuration, one for each VRF in use."}),"\n",(0,t.jsxs)(n.p,{children:["For a BGP neighbor residing in the default VRF, the generated BGP service  is named ",(0,t.jsx)(n.code,{children:"_bgp_<router-name>_<routing-interface-name>"}),", and the tenant associated with this BGP neighbor in the default VRF is named ",(0,t.jsx)(n.code,{children:"_bgp_speaker_"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For a BGP neighbor residing in a non-default VRF, the generated BGP service is named ",(0,t.jsx)(n.code,{children:"_bgp_<router-name>_<vrf-name>_<vrf-routing-interface-name>"}),". The associated tenant is named ",(0,t.jsx)(n.code,{children:"_<vrf-name>._vrf_bgp_speaker_"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"troubleshooting-2",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["If expected BGP services or service-routes are not auto-generated, use the log messages on the conductor to troubleshoot. Each BGP service and service-route that is generated or skipped for config generation results in a debug level log message. These messages are written to ",(0,t.jsx)(n.code,{children:"persistentDataManager.log"})," with category RTG and sub-category CFG."]}),"\n",(0,t.jsx)(n.p,{children:"If all expected configuration has been generated, but a BGP over SVR session does not come up, then all available tools for debugging traffic problems also apply to BGP sessions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"show fib"}),"\n",(0,t.jsx)(n.li,{children:"show service-path"}),"\n",(0,t.jsx)(n.li,{children:"show sessions"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, use the ",(0,t.jsx)(n.code,{children:"show rib {vrf <vrf-name>}"})," command to verify the BGP neighbor is reachable and its kernel route entry is not superseded by another, higher priority entry in the RIB."]}),"\n",(0,t.jsx)(n.h2,{id:"bgp-conditional-advertisement-1",children:"BGP Conditional Advertisement"}),"\n",(0,t.jsx)(n.p,{children:"When an SSR prefers a given provider for outbound traffic, it can be configured to receive locally destined traffic from that provider. By advertising the SSR's local routes to the preferred provider, it ensures that locally destined traffic only comes from the preferred provider."}),"\n",(0,t.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"BGP conditional advertisement is configured under the BGP neighbor address by configuring a conditional routing policy and an advertisement routing policy."}),"\n",(0,t.jsx)(n.p,{children:"When the conditional routing policy is satisfied against all BGP selected routes in the BGP RIB, all routes in the BGP RIB matched by the advertising routing policy are advertised to the configured neighbor."}),"\n",(0,t.jsxs)(n.p,{children:["If the conditional routing policy is not satisfied, all routes matched by the advertising route policy are withdrawn from the configured neighbor. The conditional routing policy may be configured to be satisfied in an ",(0,t.jsx)(n.code,{children:"exist-case"}),", where any route matches the policy; or where no route matches - a ",(0,t.jsx)(n.code,{children:"non-exist case"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"routing-protocol bgp\n    type                       bgp\n    local-as                   2\n    conditional-advertisement\n        interval-time  15\n    exit\n    neighbor                   <neighbor-ip>\n        address-family    ipv4-unicast\n            conditional-advertisement\n                advertisement-policy  <policy-name>\n                exist-policy          <policy-name>\n            exit\n        exit\n    exit\n    neighbor                   <neighbor-ip>\n        address-family    ipv4-unicast\n            conditional-advertisement\n                advertisement-policy  <policy-name>\n                non-exist-policy      <policy-name>\n            exit\n        exit\n    exit\nexit\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"The conditional routing policy is evaluated by default every 60 seconds, but is configurable as shown above."}),"\n",(0,t.jsx)(n.p,{children:"Conditional advertisement is applicable to established BGP neighbors only."}),"\n",(0,t.jsx)(n.h3,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,t.jsx)(n.p,{children:"In this example, the hubs are 11.1.1.4, 11.1.1.5, and 172.16.3.6. The conditional exist policy for each hub is the default route prefix match, and the peer address of the hub. The hubs use the same advertise policy."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"filter  default-route\n    type  prefix-filter\n    name  default-route \n    rule  10\n        name    10\n        prefix  0.0.0.0/0\n    exit\nexit\nfilter  15-0\n    type  prefix-filter\n    name  15-0\n    rule  10\n        name    10\n        prefix  15.0.0.0/16\n        le      32\n    exit\nexit\npolicy  default-dut4\n    name       default-dut4\n    statement  10\n        name       10\n        condition  address-prefix-filter-condition\n            type           address-prefix-filter-condition\n            prefix-filter  default-route\n        exit\n        condition  peer-condition\n            type          peer-condition\n            peer-address  11.1.1.4\n        exit\n    exit\nexit \npolicy  default-dut5\n    name       default-dut5\n    statement  10\n        name       10\n        condition  address-prefix-filter-condition\n            type           address-prefix-filter-condition\n            prefix-filter  default-route\n        exit\n        condition  peer-condition\n            type          peer-condition\n            peer-address  11.1.1.5\n        exit\n    exit\nexit\npolicy  default-dut6\n    name       default-dut6\n    statement  10\n        name       10\n        condition  address-prefix-filter-condition\n            type           address-prefix-filter-condition\n            prefix-filter  default-route\n        exit\n        condition  peer-condition\n            type          peer-condition\n            peer-address  172.16.3.6\n        exit\n    exit\nexit\npolicy  15-0\n    name       15-0 \n    statement  10\n        name       10\n         condition  address-prefix-filter-condition\n            type           address-prefix-filter-condition\n            prefix-filter  15-0\n        exit\n        action     set-community\n            type                 set-community\n            community-attribute  2:15\n        exit\n    exit\nexit\n\nrouting-protocol  bgp\n    type                       bgp\n    local-as                   2\n    conditional-advertisement\n        interval-time  15\n    exit\n    neighbor                   11.1.1.4\n        neighbor-address  11.1.1.4\n        neighbor-as       4\n        address-family    ipv4-unicast\n            afi-safi                   ipv4-unicast\n            conditional-advertisement\n                advertisement-policy  15-0\n                exist-policy          default-dut4\n            exit\n        exit\n    exit\n    neighbor                   11.1.1.5\n        neighbor-address  11.1.1.5\n        neighbor-as       5 \n        address-family    ipv4-unicast\n            afi-safi                   ipv4-unicast\n            conditional-advertisement\n                advertisement-policy  15-0\n                exist-policy          default-dut5\n            exit\n        exit\n    exit\n    neighbor                   172.16.3.6\n        neighbor-address  172.16.3.6\n        neighbor-as       6\n        address-family    ipv4-unicast\n            afi-safi                   ipv4-unicast\n            conditional-advertisement\n                advertisement-policy  15-0\n                exist-policy          default-dut6\n            exit\n        exit\n    exit\nexit\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"known-limitations",children:"Known Limitations"}),"\n",(0,t.jsx)(n.p,{children:"This feature may introduce some additional load on the routing engine as the conditional policy must be executed each time the BGP RIB changes."}),"\n",(0,t.jsx)(n.h3,{id:"show-commands",children:"Show Commands"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"show bgp neighbors"})," to see information about the neighbor conditional advertisement configuration and state:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"PCLI# show bgp neighbors\n\u2026\nBGP neighbor is 11.1.1.5, remote AS 5, local AS 2, external link\n\u2026\n  Condition EXIST, Condition-map *default-dut5, Advertise-map *15-0, status: Withdraw\n"})}),"\n",(0,t.jsx)(n.h2,{id:"bgp-graceful-restart",children:"BGP Graceful Restart"}),"\n",(0,t.jsxs)(n.p,{children:["Users can now configure ",(0,t.jsx)(n.code,{children:"graceful-restart"})," as disabled, rather than helper mode or full graceful restart. Additionally, the graceful restart mode on BGP neighbors can be configured differently than on the BGP instance. Historically there was no separate neighbor configuration. The graceful restart mode must be explicitly enabled, otherwise the default mode is ",(0,t.jsx)(n.strong,{children:"helper"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example New Data Model Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"routing-protocol     bgp\n    local-as         65    \n    graceful-restart        \n        mode             enable       \n        restart-time     150       \n        stale-routes-time    150        \n    \u2026        \n    neighbor     172.16.0.1            \n        neighbor-as    66           \n        graceful-restart               \n            mode         disable\n"})}),"\n",(0,t.jsx)(n.h3,{id:"show-command-and-troubleshooting",children:"Show Command and Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"show bgp neighbors"})," command to verify graceful restart is configured as expected. Graceful restart is part of BGP capabilities negotiation.  When the BGP peering session is established, the command output includes the negotiated graceful restart:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Graceful Restart Capability: advertised\nGraceful restart information:\n    Local GR Mode: Helper*\n    Remote GR Mode: Disable\n    R bit: False\nTimers:\n    Configured Restart Time(sec): 120\n    Received Restart Time(sec): 0\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the BGP peering session does not form, use packet capture to view the local BGP protocol traffic from the linux shell:\n",(0,t.jsx)(n.code,{children:'ip netns exec routingEngine tcpdump -i any -v "tcp port 179\u201d'})]}),"\n",(0,t.jsx)(n.h2,{id:"routing-features",children:"Routing Features"}),"\n",(0,t.jsx)(n.p,{children:"This section contains various features supported by the SSR's BGP implementation."}),"\n",(0,t.jsx)(n.h3,{id:"configuring-ssr-as-a-route-reflector",children:"Configuring SSR as a Route Reflector"}),"\n",(0,t.jsxs)(n.p,{children:["While configuring iBGP, you may need to enable the ",(0,t.jsx)(n.strong,{children:"Route Reflector"})," capability to facilitate easy learning of routes. Your SSR can be configured as a route reflector for a particular neighbor or more realistically a set of neighbors, also known as a route reflector client(s). This can be configured in the route reflector router's BGP config, under the respective neighbor object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# config auth\nadmin@branchoffice1.seattlesite1 (authority)# router seattlesite1\nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing- protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# neighbor 1.1.1.1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In our example, the route reflector in our network is ",(0,t.jsx)(n.code,{children:"branchoffice1"})," router, and our route reflector client is its neighbor ",(0,t.jsx)(n.code,{children:"1.1.1.1"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# route-reflector client true\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\n"})}),"\n",(0,t.jsxs)(n.p,{children:["By setting ",(0,t.jsx)(n.code,{children:"route-reflector client true"}),", we instruct the ",(0,t.jsx)(n.code,{children:"branchoffice1"})," router to treat the neighbor as a route reflector client."]}),"\n",(0,t.jsxs)(n.p,{children:["There is one additional field which needs to be set in route reflector's BGP config, and that is ",(0,t.jsx)(n.code,{children:"Cluster-ID"}),", which has the format of an IP address. This can be set to anything unique in the AS, and can be the same as the ",(0,t.jsx)(n.code,{children:"Router ID"})," field."]}),"\n",(0,t.jsxs)(n.p,{children:["When the route reflector sends routes to the clients, by default it doesn't modify the next-hop. An outbound policy can be used to change the next-hop in these routes to that of the route reflector, if desired. In such instances, another option, which is turned off by default, needs to be set in the route reflector's BGP config: ",(0,t.jsx)(n.code,{children:"Route Reflector Allow Outbound Policy = TRUE"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"bgp-confederations",children:"BGP Confederations"}),"\n",(0,t.jsxs)(n.p,{children:["When configuring iBGP, the ",(0,t.jsx)(n.strong,{children:"Confederation"})," feature may be helpful when dealing with an enormous autonomous system. This feature allows you to break up the AS into smaller sub-autonomous systems. Confederation can be directly configured under the routing protocol element. Here, 65535 is the ",(0,t.jsx)(n.strong,{children:"confederation identifier AS number"})," and, 1100 and 2200 are the ",(0,t.jsx)(n.strong,{children:"member AS"})," numbers of that confederation AS."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"admin@branchoffice1.seattlesite1# config auth\nadmin@branchoffice1.seattlesite1 (authority)# router seattlesite1\nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing- protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# confederation identifier 65535\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# confederation member-as 1100\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# confederation member-as 2200\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# exit\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},73310:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/config_BGPoSVRinVRF-b1f0b14a118e12dfc45016eef75713d8.png"},96049:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/config_bgp_serv_gen_settings-336528b8c4307f4aaa74026406259869.png"},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);