"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[538],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return h}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),h=a,f=u["".concat(d,".").concat(h)]||u[h]||p[h]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1135:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],s={title:"DNS Proxy",sidebar_label:"DNS Proxy"},d={unversionedId:"config_dns_proxy",id:"config_dns_proxy",isDocsHomePage:!1,title:"DNS Proxy",description:"In a typical hub/spoke deployment, its very common for the WAN interfaces to have some sort of dynamic interface such as DHCP, PPPoE, LTE, etc. The 128T router can dynamically learn the DNS server address for these interfaces and can load balance DNS requests across the learned servers. The dns-proxy feature aims to provide a simple way to proxy all DNS requests originating on the LAN side to the learned server address(es) on the WAN side without having to re-configure or update client endpoints. This allows the network to better adapt to failures on the WAN interfaces while minimizing loss of connectivity from client side applications as clients can utilize the LAN address of the 128T to resolve DNS requests.",source:"@site/docs/config_dns_proxy.md",sourceDirName:".",slug:"/config_dns_proxy",permalink:"/docs/config_dns_proxy",version:"current",lastUpdatedAt:1638570597,formattedLastUpdatedAt:"12/3/2021",sidebar_label:"DNS Proxy",frontMatter:{title:"DNS Proxy",sidebar_label:"DNS Proxy"},sidebar:"docs",previous:{title:"Dynamic Host Configuration Protocol (DHCP)",permalink:"/docs/config_dhcp"},next:{title:"LDAP",permalink:"/docs/config_ldap"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Advertise Interface Address as DNS Server",id:"advertise-interface-address-as-dns-server",children:[]},{value:"Configuring a DNS proxy service",id:"configuring-a-dns-proxy-service",children:[{value:"How to proxy DNS requests originating from the linux host of the 128T router",id:"how-to-proxy-dns-requests-originating-from-the-linux-host-of-the-128t-router",children:[]}]},{value:"Configuring Service Route(s)",id:"configuring-service-routes",children:[{value:"Multiple learned DNS addresses",id:"multiple-learned-dns-addresses",children:[]},{value:"Manually configured <code>target-address</code>",id:"manually-configured-target-address",children:[]}]}],l={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In a typical hub/spoke deployment, its very common for the WAN interfaces to have some sort of dynamic interface such as DHCP, PPPoE, LTE, etc. The 128T router can dynamically learn the DNS server address for these interfaces and can load balance DNS requests across the learned servers. The dns-proxy feature aims to provide a simple way to proxy all DNS requests originating on the LAN side to the learned server address(es) on the WAN side without having to re-configure or update client endpoints. This allows the network to better adapt to failures on the WAN interfaces while minimizing loss of connectivity from client side applications as clients can utilize the LAN address of the 128T to resolve DNS requests."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The common workflow for using this feature is as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Configure a DNS server for the LAN network(s)"),(0,o.kt)("li",{parentName:"ul"},"Configure a DNS proxy service to match the advertisement"),(0,o.kt)("li",{parentName:"ul"},"Configure a service-route to indicate the WAN interface(s) to be used for proxying DNS requests")),(0,o.kt)("h2",{id:"advertise-interface-address-as-dns-server"},"Advertise Interface Address as DNS Server"),(0,o.kt)("p",null,"A key component for DNS proxy is the ability to configure a fixed address as the DNS address for the clients on the LAN. A typical choice is to use the LAN-facing 128T interface address as the DNS server address, though the feature is not limited to this choice. The selected address can either be statically configured on the clients or configured via DHCP server (either external or 128T acting as the DHCP server)."),(0,o.kt)("p",null,"On a linux system representing a client, its ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/resolv.conf")," file would contain similar contents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"; generated by /usr/sbin/dhclient-script\nsearch openstacklocal\nnameserver 10.10.10.1\n")),(0,o.kt)("h2",{id:"configuring-a-dns-proxy-service"},"Configuring a DNS proxy service"),(0,o.kt)("p",null,"The special ",(0,o.kt)("inlineCode",{parentName:"p"},"dns-proxy")," application-type is used for creating a DNS proxy service. All other service attributes such as access-policies, service-policies, etc., are also applicable to this service. The ",(0,o.kt)("inlineCode",{parentName:"p"},"dns-proxy")," application-type indicates to the 128T router to perform a destination NAT on the traffic when the session is created for the service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"admin@node1.conductor# show config running authority service lan-dns-proxy\n\nconfig\n\n    authority\n\n        service  lan-dns-proxy\n            name              lan-dns-proxy\n\n            transport         udp\n                protocol    udp\n\n                port-range  53\n                    start-port  53\n                exit\n            exit\n            address           10.10.10.1\n\n            access-policy     lan\n                source      lan\n                permission  allow\n            exit\n\n            access-policy     _internal_\n                source      _internal_\n                permission  allow\n            exit\n            application-type  dns-proxy\n        exit\n    exit\nexit\n\nadmin@node1.conductor#\n")),(0,o.kt)("p",null,"The example configuration captures all DNS traffic sent to address ",(0,o.kt)("inlineCode",{parentName:"p"},"10.10.10.1")," interface as configured on the test client in the previous step. "),(0,o.kt)("h3",{id:"how-to-proxy-dns-requests-originating-from-the-linux-host-of-the-128t-router"},"How to proxy DNS requests originating from the linux host of the 128T router"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"_internal_")," tenant has a special meaning on the 128T routers as it represents the traffic originating from the host OS of the router. When the service allows the ",(0,o.kt)("inlineCode",{parentName:"p"},"_internal_")," tenant and a ",(0,o.kt)("inlineCode",{parentName:"p"},"service-route")," is created for this service, the target router linux environment is automatically configured for use with the DNS proxy. The ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/resolv.conf")," on the 128T is modified to point to a loopback address within the 128T router."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"; This file has been automatically updated by 128T - DO NOT EDIT\nnameserver 169.254.127.126\n")),(0,o.kt)("p",null,"This allows all DNS queries (for example, as a result of dnf lookups, etc.) to be intercepted by 128T router and create sessions appropriately."),(0,o.kt)("p",null,"Additionally, this loopback address needs to be added to ",(0,o.kt)("inlineCode",{parentName:"p"},"dns-proxy")," service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"config\n    authority\n        service  lan-dns-proxy\n            name              lan-dns-proxy\n            ...\n            address           10.10.10.1\n            address           169.254.127.126\n            ...\n            application-type  dns-proxy\n        exit\n    exit\nexit\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/resolv.conf")," file can also be configured to point to the LAN interface address to achieve the same results."))),(0,o.kt)("h2",{id:"configuring-service-routes"},"Configuring Service Route(s)"),(0,o.kt)("p",null,"When the service route's next hop for the dns-proxy service points to a dynamic interface such as DHCP based interface, any learned DNS address(es) will be automatically used as destination nat target for sessions for that service. This is accomplished by populating the ",(0,o.kt)("inlineCode",{parentName:"p"},"next-hop")," > ",(0,o.kt)("inlineCode",{parentName:"p"},"target-address")," configuration internally upon address resolution. An example of the service-route configuration is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"admin@node1.conductor# show config running authority router router1 node node1 device-interface inband-mgmt\n\nconfig\n\n    authority\n\n        router  router1\n            name  router1\n\n            node  node1\n                name              node1\n\n                device-interface  inband-mgmt\n                    name               inband-mgmt\n                    pci-address        0000:00:03.0\n\n                    network-interface  inband-mgmt-intf\n                        name          inband-mgmt-intf\n                        global-id     1\n                        conductor     true\n                        tenant        wan\n                        source-nat    true\n\n                        host-service  ssh\n                            service-type  ssh\n                        exit\n\n                        host-service  web\n                            service-type  web\n                        exit\n\n                        dhcp          v4\n                    exit\n                exit\n            exit\n        exit\n    exit\nexit\n\nadmin@node1.conductor# show config running authority router router1 service-route dns-proxy-route\n\nconfig\n\n    authority\n\n        router  router1\n            name           router1\n\n            service-route  dns-proxy-route\n                name          dns-proxy-route\n                service-name  lan-dns-proxy\n\n                next-hop      node1 inband-mgmt-intf\n                    node-name  node1\n                    interface  inband-mgmt-intf\n                    target-address 8.8.8.8\n                exit\n            exit\n        exit\n    exit\nexit\n\nadmin@node1.conductor#\n")),(0,o.kt)("p",null,"A few key points about the service-route for a dns-proxy service type:"),(0,o.kt)("h3",{id:"multiple-learned-dns-addresses"},"Multiple learned DNS addresses"),(0,o.kt)("p",null,"If the dynamic interface learns multiple IP addresses, the 128T router will apply a round-robin load-balancing strategy amongst these IP address. Here's how you can check the details on the learned DNS addresses."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"admin@node1.conductor# show dhcp v4 router router1 name inband-mgmt-intf detail\nSat 2020-02-22 04:43:12 UTC\n\n============================================================\n Router\n============================================================\n  Node:                            node1\n    Device Interface:              inband-mgmt\n      Network Interface:           inband-mgmt-intf\n        Dhcp State:                Resolved\n          State Machine State:     Bound\n          Lease Start Time:        Sat Feb 22 00:28:30 2020\n          Lease Renewal Time:      Sat Feb 22 12:28:30 2020\n          Lease Rebinding Time:    Sat Feb 22 18:28:30 2020\n          Lease Expiration Time:   Sun Feb 23 00:28:30 2020\n          Learned MTU:             0 bytes\n          Server Address:          192.168.1.2\n          Dns Server Address:\n            - 172.20.0.100\n            - 172.20.0.101\n          Addresses:\n            Address:               192.168.1.10\n            Prefix Length:         24\n            Gateway:               192.168.1.1\n\nCompleted in 0.14 seconds\nadmin@node1.conductor#\n")),(0,o.kt)("p",null,"The following example illustrates how the round-robin strategy gets applied for load-balancing the data across multiple learned addresses for two back-to-back queries."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"admin@node1.conductor# show sessions router router1 | grep dns-proxy\n\u2714 Piping output...\n 745809ea-7ada-4225-a379-4159c1e226a2   fwd   lan-dns-proxy                                     lan          dpdk2            0   udp     10.10.10.11          52513   10.10.10.1               53   192.168.1.10         16398   false                     4   0 days  0:00:03\n 745809ea-7ada-4225-a379-4159c1e226a2   rev   lan-dns-proxy                                     lan          inband-mgmt      0   udp     172.20.0.100            53   192.168.1.10          16398   0.0.0.0                  0   false                     4   0 days  0:00:03\n\nadmin@node1.conductor# show sessions router router1 | grep dns-proxy\n\u2714 Piping output...\n 801d9495-66a4-44cf-9eea-e22731389a95   fwd   lan-dns-proxy                                     lan          dpdk2            0   udp     10.10.10.11          44426   10.10.10.1               53   192.168.1.10         16399   false                     5   0 days  0:00:03\n 801d9495-66a4-44cf-9eea-e22731389a95   rev   lan-dns-proxy                                     lan          inband-mgmt      0   udp     172.20.0.101            53   192.168.1.10          16399   0.0.0.0                  0   false                     5   0 days  0:00:03\n")),(0,o.kt)("h3",{id:"manually-configured-target-address"},"Manually configured ",(0,o.kt)("inlineCode",{parentName:"h3"},"target-address")),(0,o.kt)("p",null,"As seen in the example ",(0,o.kt)("a",{parentName:"p",href:"#configuring-service-routes"},"above")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"service-route")," > ",(0,o.kt)("inlineCode",{parentName:"p"},"next-hop")," points to a DHCP interface and also specifies ",(0,o.kt)("inlineCode",{parentName:"p"},"8.8.8.8")," as the target-address. When this configuration is present, the learned address are combined with the statically configured address(es). Based on the previous example, this means that there will be three DNS server targes (8.8.8.8, 172.20.0.100, 172.20.0.101). This configuration also allow the user to configure a failsafe DNS server address in case the DHCP server did not provide any valid DNS server addresses."))}p.isMDXComponent=!0}}]);