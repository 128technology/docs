"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[9334],{30822:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(74848),o=t(28453);const i={title:"SVR Transport Reuse",sidebar_label:"SVR Transport Reuse"},r=void 0,a={id:"config_bfd_tunnel",title:"SVR Transport Reuse",description:"In deployments where the number of SVR sessions between SSRs are limited due to provider settings, the established BFD transport session is reused to carry SVR sessions. When enabled, the SSR transforms each packet in the SVR session to a UDP packet, matching the IP/Port tuples of the BFD peer connection. The carrier does not see any additional sessions between the SSRs beyond the initial BFD peer connection.",source:"@site/docs/config_bfd_tunnel.md",sourceDirName:".",slug:"/config_bfd_tunnel",permalink:"/docs/config_bfd_tunnel",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1710504705,formattedLastUpdatedAt:"Mar 15, 2024",frontMatter:{title:"SVR Transport Reuse",sidebar_label:"SVR Transport Reuse"},sidebar:"docs",previous:{title:"LTE and Dual LTE Configuration",permalink:"/docs/howto_lte"},next:{title:"Configuring PPPoE",permalink:"/docs/howto_config_PPPoE"}},c={},d=[{value:"Configuration",id:"configuration",level:2},{value:"From the SSR GUI",id:"from-the-ssr-gui",level:4},{value:"From the PCLI",id:"from-the-pcli",level:4},{value:"How It Works",id:"how-it-works",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In deployments where the number of SVR sessions between SSRs are limited due to provider settings, the established BFD transport session is reused to carry SVR sessions. When enabled, the SSR transforms each packet in the SVR session to a UDP packet, matching the IP/Port tuples of the BFD peer connection. The carrier does not see any additional sessions between the SSRs beyond the initial BFD peer connection."}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["This feature is accessed from Authority > Router > Node > Device > Network Interface > Neighborhood, as part of a ",(0,s.jsx)(n.code,{children:"spoke"})," configuration."]}),"\n",(0,s.jsx)(n.h4,{id:"from-the-ssr-gui",children:"From the SSR GUI"}),"\n",(0,s.jsxs)(n.p,{children:["Use the path described above to access the Neighborhood configuration. After naming the neighborhood, choose the ",(0,s.jsx)(n.code,{children:"spoke"})," topology type. This opens the Peer Path Overlay field. The following options are available:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"svr"}),": The original SVR overlay connection method. This is the default method for bidirectional connectivity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"bfd-tunnel"}),": Outbound only connection method; enables the SVR Transport Reuse feature."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"BFD Tunnel on Neighborhood",src:t(8825).A+"",width:"1854",height:"498"})}),"\n",(0,s.jsx)(n.p,{children:"These options are the same for the PCLI."}),"\n",(0,s.jsx)(n.h4,{id:"from-the-pcli",children:"From the PCLI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"config\n\n    authority\n\n        router  spo8\n            name  spo8\n\n            node  spo8\n                name              spo8\n\n                device-interface  lte\n                    name               lte\n\n                    network-interface  lte\n                        name          lte\n\n                        neighborhood  internet-act-lte\n                            name               internet-act-lte\n                            peer-path-overlay  bfd-tunnel\n                        exit\n                    exit\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Both peers must be running the version of the SSR software that supports this feature, and have the same ",(0,s.jsx)(n.code,{children:"bfd-tunnel"})," overlay model."]})}),"\n",(0,s.jsx)(n.p,{children:"An attribute is added to the unencrypted metadata of UDP packets going over the BFD connection to distinguish this traffic from other BFD traffic. New sessions are established with additional metadata. Sessions continue to allocate waypoints, and are used to create individual flows. These waypoints are carried in the metadata and used locally on each router."}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsxs)(n.p,{children:["Use the following ",(0,s.jsx)(n.code,{children:"show stats"})," metrics to view and troubleshoot issues encountered with SVR Transport Reuse:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/cli_stats_reference#show-stats-packet-processing-action-success-tunnel-bfd-encapsulate",children:(0,s.jsx)(n.code,{children:"show stats packet-processing action success tunnel bfd encapsulate"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/cli_stats_reference#show-stats-packet-processing-action-success-tunnel-bfd-decapsulate",children:(0,s.jsx)(n.code,{children:"show stats packet-processing action success tunnel bfd decapsulate"})})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8825:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/config_bfd_tunnel_gui-a83f80be6b2daa238e943498ee99fa7b.png"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);