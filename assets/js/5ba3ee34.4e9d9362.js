"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[1586],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),f=r,m=c["".concat(l,".").concat(f)]||c[f]||d[f]||o;return n?i.createElement(m,a(a({ref:t},u),{},{components:n})):i.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},62665:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),a=["components"],s={title:"VRF Route Leaking",sidebar_label:"VRF Route Leaking"},l=void 0,p={unversionedId:"config_vrf_route_leaking",id:"config_vrf_route_leaking",title:"VRF Route Leaking",description:"Why Leak Routes?",source:"@site/docs/config_vrf_route_leaking.md",sourceDirName:".",slug:"/config_vrf_route_leaking",permalink:"/docs/config_vrf_route_leaking",draft:!1,tags:[],version:"current",lastUpdatedAt:1708633599,formattedLastUpdatedAt:"Feb 22, 2024",frontMatter:{title:"VRF Route Leaking",sidebar_label:"VRF Route Leaking"},sidebar:"docs",previous:{title:"BGP",permalink:"/docs/config_bgp"},next:{title:"OSPF",permalink:"/docs/config_ospf"}},u={},d=[{value:"Why Leak Routes?",id:"why-leak-routes",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Route Distinguisher",id:"route-distinguisher",level:3},{value:"Route Target",id:"route-target",level:3},{value:"Configuration",id:"configuration",level:2},{value:"VRF Route Sharing Within a Router",id:"vrf-route-sharing-within-a-router",level:3},{value:"Some Notes",id:"some-notes",level:4},{value:"VRF Route Sharing Between Different Routers",id:"vrf-route-sharing-between-different-routers",level:3},{value:"Sharing Routes from Multiple VRFs via a Single BGP Session",id:"sharing-routes-from-multiple-vrfs-via-a-single-bgp-session",level:3},{value:"Import and Export Policies",id:"import-and-export-policies",level:3},{value:"Configuration Commands",id:"configuration-commands",level:2},{value:"<code>vpn-export</code>",id:"vpn-export",level:4},{value:"<code>vpn-import</code>",id:"vpn-import",level:4},{value:"<code>address-family ipv4-vpn</code>",id:"address-family-ipv4-vpn",level:4},{value:"<code>address-family ipv6-vpn</code>",id:"address-family-ipv6-vpn",level:4}],c={toc:d};function f(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"why-leak-routes"},"Why Leak Routes?"),(0,o.kt)("p",null,'The word "leak" implies a break or a breach, and in some cases, route leaking can be malicious. However in the case of VRF route leaking it indicates the intentional sharing of route information across VRF instances. Some benefits are that traffic can be shared or balanced across VRF instances, or sharing a default route to the internet that can be adopted by each VRF. This document describes the process of configuring the import and export actions for sharing VRF routes, whether on the same router, between routers, or sharing routes from multiple VRFs between routers.'),(0,o.kt)("h2",{id:"how-it-works"},"How It Works"),(0,o.kt)("p",null,"The exchange of routes between a VRF on one SSR and a VRF on another SSR is achieved using a single BGP session in the default VRF, where the VPN address family carries the routes for multiple VRFs via that one BGP session. This configuration allows each VRF to share and copy the designated routes."),(0,o.kt)("p",null,"Only one instance of the BGP VPN RIB route table exists on a router within the default VRF. It can be modified to hold routes from multiple VRFs using a combination of the IP prefix and an 8-byte Route Distinguisher (RD). The RD must be configured for each VRF that is meant to export routes into the VPN table. To identify which VPN routes are imported to a VRF, a Route Target (RT) is identified. The RT is a BGP extended community attribute that identifies both the VPN RIB where the routes will be shared, and is used to identify the routes to be imported to a VRF.  "),(0,o.kt)("h3",{id:"route-distinguisher"},"Route Distinguisher"),(0,o.kt)("p",null,"The Route Distinguisher (RD) is an identification number, used to create a distinct route to a common IPv4 address prefix. In the example below, we use the router-ID and a vlan-id from the VRF, but any number or name can be used.  "),(0,o.kt)("h3",{id:"route-target"},"Route Target"),(0,o.kt)("p",null,"The Route Target (RT) identifies one or more routers that may receive a set of routes carried by BGP. There should be an understanding between the routers what the RT represents. In the example below, we use the local AS number (65000 from the private AS number space), and append a logical value; 1 for ",(0,o.kt)("inlineCode",{parentName:"p"},"vrfA")," and 2 for ",(0,o.kt)("inlineCode",{parentName:"p"},"vrfB"),". This construction makes it fairly easy to understand.  "),(0,o.kt)("p",null,"The RFC 4364 architecture for VPN route exchange via BGP depends on an underlying MPLS transport network, so that traffic from different VRFs (with overlapping IP address space) can be tunneled through the network. The SSR does not use MPLS for this purpose. Instead of MPLS tunneling, the SSR uses SVR and the tenant concept to enable tunnel-free forwarding of VPN traffic. The tenant identifies the VRF and provides functionality similar to the VPN label in the RFC 4364 architecture. "),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"Route leaking can be configured for any of the following scenarios."),(0,o.kt)("h3",{id:"vrf-route-sharing-within-a-router"},"VRF Route Sharing Within a Router"),(0,o.kt)("p",null,"To share routes between VRF A and VRF B on the same SSR, use the following process:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Configure a ",(0,o.kt)("inlineCode",{parentName:"li"},"route-distinguisher")," for VRF A."),(0,o.kt)("li",{parentName:"ol"},"Configure the route export from VRF A into the VPN RIB ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Specify the RT to attach to the exported routes "),(0,o.kt)("li",{parentName:"ul"},"Optionally specify an export policy. ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"config\n    authority\n        router     router-boston\n            routing       default-instance\n                type      default-instance\n                                \n                vrf    vrfA\n                    name             vrfA\n                    tenant-name      tenantA\n                    routing-protocol    bgp\n                        type            bgp\n                        local-as        65000\n                        address-family     ipv4-unicast\n                            afi-safi       ipv4-unicast\n                            vpn-export\n                                route-distinguisher        16.0.0.2:101\n                                vpn-export-route-target    65000:1\n                            exit\n                            vpn-import\n                                vpn-import-route-target    65000:2\n                            exit\n                            redistribute     connected\n                                protocol     connected\n                            exit\n                        exit\n                        address-family       ipv6-unicast\n                            afi-safi         ipv6-unicast\n                            vpn-export\n                                route-distinguisher         16.0.0.2:101\n                                vpn-export-route-target     65000:1\n                            exit\n                            vpn-import\n                                 vpn-import-route-target     65000:2\n                            exit\n                            redistribute     connected\n                                protocol     connected\n                            exit\n                        exit\n                    exit\n                exit\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Configure an RD for VRF B."),(0,o.kt)("li",{parentName:"ol"},"Configure the route import from the VPN RIB into VRF B ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Specify the RT to attach to the exported routes "),(0,o.kt)("li",{parentName:"ul"},"Optionally specify an export policy. ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"                vrf      vrfB\n                    name                vrfB\n                    tenant-name         tenantB\n                        routing-protocol    bgp\n                            type bgp\n                            local-as     65000\n                            address-family    ipv4-unicast\n                                afi-safi      ipv4-unicast\n                                vpn-export\n                                    route-distinguisher       16.0.0.2:102\n                                    vpn-export-route-target   65000:2\n                                exit\n                                vpn-import\n                                    vpn-import-route-target   65000:1\n                                exit\n                                redistribute     connected\n                                    protocol     connected\n                                exit                                \n                            exit\n                            address-family     ipv6-unicast\n                                afi-safi       ipv6-unicast\n                                vpn-export\n                                    route-distinguisher         16.0.0.2:102\n                                    vpn-export-route-target     65000:2\n                                exit\n                                vpn-import\n                                    vpn-import-route-target     65000:1\n                                exit\n                                redistribute     connected\n                                    protocol     connected\n                                exit\n                            exit\n                        exit\n                    exit\n                exit\n            exit\n")),(0,o.kt)("h4",{id:"some-notes"},"Some Notes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Either VRF A or VRF B may be the default VRF."),(0,o.kt)("li",{parentName:"ul"},"Route leaking is only allowed with BGP routes, however, BGP neighbors do not need to be configured. If static, connected, or OSPF routes of a VRF are to be shared, they first need to be redistributed into BGP. ")),(0,o.kt)("h3",{id:"vrf-route-sharing-between-different-routers"},"VRF Route Sharing Between Different Routers"),(0,o.kt)("p",null,"Use the following configuration process to allow routes from VRF A on SSR-MZ to appear in VRF A on SSR-DZ. "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Configure VRF A on SSR-MZ, and identify the RD and RT."),(0,o.kt)("li",{parentName:"ol"},"Configure the route export from vrfA into the VPN RIB, ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Specify the RT to attach to the exported routes "),(0,o.kt)("li",{parentName:"ul"},"Optionally specify an export policy. (more steps)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"        router SSR-MZ\n            routing default-instance\n                vrf vrfA\n                   name vrfA\n                   tenant-name tenantA\n                   routing-protocol bgp\n                       type bgp\n                       local-as 65000\n                       router-id 16.0.0.2\n                       address-family ipv4-unicast\n                           afi-safi ipv4-unicast\n                           vpn-export\n                               route-distinguisher 16.0.0.2:101\n                               vpn-export-route-target 65000:1\n                           exit\n                           vpn-import\n                               vpn-import-route-target 65000:1\n                           exit\n                       exit\n                       address-family ipv6-unicast\n                           afi-safi ipv6-unicast\n                           vpn-export\n                               route-distinguisher 16.0.0.2:101\n                               vpn-export-route-target 65000:1\n                           exit\n                           vpn-import\n                               vpn-import-route-target 65000:1\n                           exit\n                       exit\n                       redistribute connected\n                           protocol connected\n                       exit\n                   exit\n               exit\n\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Configure the route import from the VPN RIB into vrfA on SSR-DZ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Select what routes to import by specifying the same RT as in the previous steps"),(0,o.kt)("li",{parentName:"ul"},"Optionally specify an import policy. (more steps)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"        router SSR-DZ\n            routing default-instance\n                vrf vrfA\n                    name vrfA\n                    tenant-name tenantA\n                    routing-protocol bgp\n                        type bgp\n                        local-as 65000\n                        router-id 16.0.0.3\n                            address-family ipv4-unicast\n                                afi-safi ipv4-unicast\n                                vpn-export\n                                    route-distinguisher 16.0.0.3:201\n                                    vpn-export-route-target 65000:1\n                                exit\n                                vpn-import                                          \n                                    vpn-import-route-target 65000:1\n                                exit\n                            exit\n                            address-family ipv6-unicast\n                                redistribute connected\n                                    protocol connected\n                                exit\n                                afi-safi ipv6-unicast\n                                vpn-export\n                                    route-distinguisher 16.0.0.3:201\n                                    vpn-export-route-target 65000:1\n                                exit\n                                vpn-import\n                                    vpn-import-route-target 65000:1\n                                exit\n                            exit\n                            redistribute connected\n                                protocol connected\n                            exit\n                        exit\n                    exit\n                exit\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Configure the exchange of BGP VPN routes between SSR-MZ and SSR-DZ. Configure the VPN address family on each BGP neighbor. If the routers are direct BGP neighbors, the BGP peering is done using each router\u2019s default VRF, where the VPN RIB is located. The result is the exchange of routes between SSR-MZ and SSR-DZ from the VPN RIB, allowing the BGP policy mechanisms to be available to select the subset of the VPN routes for exchange, and for modifying their attributes.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"        router SSR-DZ\n            routing default-instance\n                type default-instance\n                    interface loopback\n                        name loopback\n                        ip-address 16.0.0.3\n                    exit\n                    routing-protocol bgp\n                        type bgp\n                        local-as 65000\n                        router-id 16.0.0.3\n                        neighbor SSR-MZ\n                            neighbor-address 16.0.0.2\n                                neighbor-as 65000\n                                transport\n                                    local-address\n                                        routing-interface loopback\n                                    exit\n                                exit\n                                address-family ipv4-vpn\n                                    afi-safi ipv4-vpn\n                                    next-hop-self true\n                                exit\n                                address-family ipv6-vpn\n                                    afi-safi ipv6-vpn\n                                    next-hop-self true\n                                exit\n                            exit\n                        exit\n")),(0,o.kt)("p",null,"If SSR-MZ and SSR-DZ are not direct BGP neighbors, there must be some set of other BGP peers between them, configured to propagate the VPN address family routes from SSR-MZ and ultimately send them to SSR-DZ."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"        router SSR-MZ\n            routing default-instance\n                type default-instance\n                    interface loopback\n                        name loopback\n                        ip-address 16.0.0.2\n                    exit\n                    routing-protocol bgp\n                        type bgp\n                        local-as 65000\n                        router-id 16.0.0.2\n                        neighbor SSR-DZ\n                            neighbor-address 16.0.0.3\n                                neighbor-as 65000\n                                transport\n                                    local-address\n                                        routing-interface loopback\n                                    exit\n                                exit\n                                address-family ipv4-vpn\n                                    afi-safi ipv4-vpn\n                                    next-hop-self true\n                                exit\n                                address-family ipv6-vpn\n                                    afi-safi ipv6-vpn\n                                    next-hop-self true\n                                exit\n                            exit\n                        exit\n")),(0,o.kt)("h3",{id:"sharing-routes-from-multiple-vrfs-via-a-single-bgp-session"},"Sharing Routes from Multiple VRFs via a Single BGP Session"),(0,o.kt)("p",null,"In a situation where SSR-MZ has multiple VRFs A, B, C; and all routes are to be shared with SSR-DZ, (which also has VRFs A, B, C) the configuration is very similar as the previous steps. The difference is using a different RT for each VRF. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Export each VRF on SSR-MZ into it\u2019s VPN RIB, using a different RT for each VRF"),(0,o.kt)("li",{parentName:"ul"},"Share the VPN RIB routes from SSR-MZ to SSR-DZ using a single BGP session in the default VRF."),(0,o.kt)("li",{parentName:"ul"},"Import the routes from the VPN RIB on SSR-DZ into the respective VRF's (based on the RT).")),(0,o.kt)("h3",{id:"import-and-export-policies"},"Import and Export Policies"),(0,o.kt)("p",null,"Import and export policies can be applied to the route leaking configuration. These can be general import/export routing policies, or specific to the VRF import/export configuration. For example, an import routing policy can be configured as below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"            routing\n                filter match-vrfA\n                    type extended-community-filter\n                    name match-vrfA\n                    rule r1\n                        name r1\n                        extended-community 65000:1\n                    exit\n                exit\n                filter match-vrfB\n                    type extended-community-filter\n                    name match-vrfB\n                        rule r1\n                            name r1\n                           extended-community 65000:2                                 \n                        exit\n                    exit\n                    filter match-vlan70\n                        type prefix-filter\n                        name match-vlan70\n                        rule r1\n                            name r1\n                            prefix 10.70.0.0/16\n                        exit\n                    exit\n                    policy select-all-of-vrfA-and-only-vlan70-from-vrfB\n                        name select-all-of-vrfA-and-only-vlan70-from-vrfB\n                        statement get-vrfA\n                            name get-vrfA\n                            condition extended-community-filter-condition\n                                type extended-community-filter-condition\n                                extended-community-filter match-vrfA\n                            exit\n                        exit\n                        statement get-vlan70-from-vrfB\n                            name get-vlan70-from-vrfB\n                            condition address-prefix-filter-condition\n                                type address-prefix-filter-condition\n                                prefix-filter match-vlan70\n                            exit\n                            condition extended-community-filter-condition\n                                type extended-community-filter-condition\n                                extended-community-filter match-vrfB\n                            exit\n                        exit\n                    exit\n                exit\n")),(0,o.kt)("p",null,"This policy is then applied to both routing targets (configured earlier) as shown here:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"             router SSR-MZ\n                 routing default-instance\n                     vrf vrfA\n                         routing-protocol bgp\n                             address-family ipv4-unicast\n                                 afi-safi ipv4-unicast\n                                 vpn-import\n                                     vpn-import-route-target 65000:1\n                                     vpn-import-route-target 65000:2\n                                     import-policy select-all-of-vrfA-and-only-vlan70-from-vrfB\n                                 exit\n")),(0,o.kt)("p",null,"In this example, the vpn-import action imports both routes from vrfA and vrfB, but the policy only selects a subset of those routes."),(0,o.kt)("h2",{id:"configuration-commands"},"Configuration Commands"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Links to configuration command documentation will be integrated when that doc is available")),(0,o.kt)("p",null,"The following commands are used to configure VRF Route Sharing."),(0,o.kt)("h4",{id:"vpn-export"},(0,o.kt)("a",{parentName:"h4",href:"/docs/config_command_guide#configure-authority-router-routing-routing-protocol-address-family-vpn-export"},(0,o.kt)("inlineCode",{parentName:"a"},"vpn-export"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"vpn-export")," is specified under ",(0,o.kt)("inlineCode",{parentName:"p"},"routing-protocol bgp > address-family ipv4-unicast")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"ipv6-unicast"),") in the VRF. When the ",(0,o.kt)("inlineCode",{parentName:"p"},"vpn-export")," configuration is present, IPv4 (or IPv6) BGP routes are exported from the VRF into the VPN RIB. The ",(0,o.kt)("inlineCode",{parentName:"p"},"route-distinguisher")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"route-target")," attributes are mandatory and need to be specified. The ",(0,o.kt)("inlineCode",{parentName:"p"},"export-policy")," attribute is optional and must reference an existing routing policy. When specified, this routing policy is applied when exporting the routes into the VPN RIB."),(0,o.kt)("h4",{id:"vpn-import"},(0,o.kt)("a",{parentName:"h4",href:"/docs/config_command_guide#configure-authority-router-routing-routing-protocol-address-family-vpn-import"},(0,o.kt)("inlineCode",{parentName:"a"},"vpn-import"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"vpn-import")," is specified under ",(0,o.kt)("inlineCode",{parentName:"p"},"routing-protocol bgp > address-family ipv4-unicast")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"ipv6-unicast"),") in the VRF. When the ",(0,o.kt)("inlineCode",{parentName:"p"},"vpn-import")," configuration is present, IPv4 (or IPv6) BGP routes are imported from the VPN RIB into the VRF. The ",(0,o.kt)("inlineCode",{parentName:"p"},"route-target")," attribute is mandatory; at least one must be specified. Multiple route targets may be specified. The ",(0,o.kt)("inlineCode",{parentName:"p"},"import-policy")," attribute is optional and must reference an existing routing policy. When specified, this routing policy is applied when importing the routes from the VPN RIB."),(0,o.kt)("h4",{id:"address-family-ipv4-vpn"},(0,o.kt)("a",{parentName:"h4",href:"/docs/config_command_guide#configure-authority-router-routing-routing-protocol-neighbor-address-family-afi-safi"},(0,o.kt)("inlineCode",{parentName:"a"},"address-family ipv4-vpn"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"address-family ipv4-vpn")," can only be specified for BGP neighbors in the default VRF. All the configuration elements under ",(0,o.kt)("inlineCode",{parentName:"p"},"address-family ipv4-vpn")," are the same as under the existing ",(0,o.kt)("inlineCode",{parentName:"p"},"address-family ipv4-unicast")," configuration element. When this address family is configured and the BGP neighbor router has an equivalent configuration, the VPN RIB routes will be exchanged with the neighbor."),(0,o.kt)("h4",{id:"address-family-ipv6-vpn"},(0,o.kt)("a",{parentName:"h4",href:"/docs/config_command_guide#configure-authority-router-routing-routing-protocol-neighbor-address-family-afi-safi"},(0,o.kt)("inlineCode",{parentName:"a"},"address-family ipv6-vpn"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"address-family ipv6-vpn")," can only be specified for BGP neighbors in the default VRF. All the configuration elements under ",(0,o.kt)("inlineCode",{parentName:"p"},"address-family ipv6-vpn")," are the same as under the existing ",(0,o.kt)("inlineCode",{parentName:"p"},"address-family ipv4-unicast")," configuration element. When this address family is configured and the BGP neighbor router has an equivalent configuration, the VPN RIB routes will be exchanged with the neighbor."))}f.isMDXComponent=!0}}]);