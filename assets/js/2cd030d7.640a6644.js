"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[3596],{83606:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=s(74848),i=s(28453);const t={title:"WAN Assurance Plugin 3.8 Release Notes",sidebar_label:"3.8"},o=void 0,l={id:"release_notes_wan_assurance_plugin_3.8",title:"WAN Assurance Plugin 3.8 Release Notes",description:"Release 3.8.0",source:"@site/docs/release_notes_wan_assurance_plugin_3.8.md",sourceDirName:".",slug:"/release_notes_wan_assurance_plugin_3.8",permalink:"/docs/release_notes_wan_assurance_plugin_3.8",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"WAN Assurance Plugin 3.8 Release Notes",sidebar_label:"3.8"},sidebar:"docs",previous:{title:"3.9",permalink:"/docs/release_notes_wan_assurance_plugin_3.9"},next:{title:"3.7",permalink:"/docs/release_notes_wan_assurance_plugin_3.7"}},c={},d=[{value:"Release 3.8.0",id:"release-380",level:2},{value:"New Features",id:"new-features",level:3},{value:"Resolved Issues",id:"resolved-issues",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"release-380",children:"Release 3.8.0"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Release Date:"})," June 04, 2024"]}),"\n",(0,r.jsx)(n.h3,{id:"new-features",children:"New Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"WAN-2632 Display the interface description on MIST UI"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Any description configured under the ",(0,r.jsx)(n.code,{children:"device-interface"})," will be displayed on the WAN Edge view on MIST UI."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"WAN-2309 Generate an alarm when device fails to register with MIST"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A new alarm will be generated when a device is unable to register with the MIST cloud during initial onboarding and will include the failure reason."}),"\n",(0,r.jsx)(n.h3,{id:"resolved-issues",children:"Resolved Issues"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["WAN-2839 The ",(0,r.jsx)(n.code,{children:"show mist"})," command sometimes reports inaccurate status"]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The logic to detect the connection down state and reason was made more robust to capture additional scenarios."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-2842 LTE interface missing tx/rx_bps"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The rx/tx bps for interfaces will now average the value across the 3 minute oc-stats window as opposed to sending a single snapshot at time of data collection."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-2853 Same interface is reported twice under different names"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," For conductor managed devices runnning on Juniper branded hardware, the logic now accounts for custom user defined device names for HA sync and HA fabric interfaces."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-2991 DHCP pool exhaustion event not being generated"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The DHCP pool exhaustion event generation better accounts for the previous event status to accurately generate the event."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3000 Process data collection spamming the logs"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The logs were updated to be less aggressive."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3001 TSI collection times out on certain devices"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," TSI collection is handled more efficiently by limiting the amount of CPU and memory the collection can consume and affording more time for the operation to complete."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3003 For port errors, same value is being reported for both nodes in an HA pair"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," Each node will report the local error counts for a given port."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3049 Probe up/down events are generated even when the physical WAN port is down"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The probe up/down events are suppressed for a physical down port."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3053 Duplicate path add/remove events being generated for HA interfaces"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The path add/remove events will be suppressed for fabric interfaces"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3072 Path Up events related to Application Path insights have incorrect reason"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," Remove the reason code from path up events since the previous Path Down will always have the correct reason code."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3077 DHCP pool events are missing the pool name"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," Add the pool name for DHCP pool events in addition to the DHCP pool udpates."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"WAN-3104 Duplicate LTE interface with null stats being reported"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The logic to detect LTE interfaces for conductor managed whitebox devices was made more robust to handle user configured device names."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);