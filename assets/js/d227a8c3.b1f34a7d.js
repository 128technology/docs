"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[2897],{85104:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(74848),i=t(28453);const o={title:"GRE Plugin",sidebar_label:"GRE"},s=void 0,l={id:"plugin_gre",title:"GRE Plugin",description:"The SSR GRE plugin can be used for creating IPv4 GRE tunnels between a SSR router and a remote GRE tunnel destination. For services such as Zscaler, this provides better throughput compared to other tunneling mechanisms.",source:"@site/docs/plugin_gre.md",sourceDirName:".",slug:"/plugin_gre",permalink:"/docs/plugin_gre",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1711024380,formattedLastUpdatedAt:"Mar 21, 2024",frontMatter:{title:"GRE Plugin",sidebar_label:"GRE"},sidebar:"docs",previous:{title:"DNS Cache",permalink:"/docs/plugin_dns_cache"},next:{title:"HA Sync Redundancy Plugin",permalink:"/docs/plugin_ha_sync_redundancy"}},a={},d=[{value:"Configuration",id:"configuration",level:2},{value:"Remote GRE tunnel information",id:"remote-gre-tunnel-information",level:3},{value:"Tunnel information",id:"tunnel-information",level:4},{value:"Tunnel ICMP health check parameters",id:"tunnel-icmp-health-check-parameters",level:3},{value:"ICMP health check to private address",id:"icmp-health-check-to-private-address",level:4},{value:"Version History",id:"version-history",level:5},{value:"SSR services to transport over the tunnel",id:"ssr-services-to-transport-over-the-tunnel",level:3},{value:"WAN interfaces for sending the tunnel packets",id:"wan-interfaces-for-sending-the-tunnel-packets",level:3},{value:"Static Source NAT considerations",id:"static-source-nat-considerations",level:4},{value:"Other configuration",id:"other-configuration",level:3},{value:"MSS Clamping",id:"mss-clamping",level:4},{value:"Version History",id:"version-history-1",level:5},{value:"Debugging &amp; Troubleshooting",id:"debugging--troubleshooting",level:2},{value:"Config Generation",id:"config-generation",level:3},{value:"GRE Tunnel not working on the router",id:"gre-tunnel-not-working-on-the-router",level:3},{value:"Tunnel operation",id:"tunnel-operation",level:3},{value:"Release Notes",id:"release-notes",level:2},{value:"Release 3.0.1",id:"release-301",level:3},{value:"Issues Fixed",id:"issues-fixed",level:4},{value:"Release 3.0.0",id:"release-300",level:3},{value:"Issues Fixed",id:"issues-fixed-1",level:4},{value:"Release 1.1.3, 2.1.3",id:"release-113-213",level:3},{value:"Issues Fixed",id:"issues-fixed-2",level:4},{value:"Release 1.1.2, 2.1.2",id:"release-112-212",level:3},{value:"Issues Fixed",id:"issues-fixed-3",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The SSR GRE plugin can be used for creating IPv4 GRE tunnels between a SSR router and a remote GRE tunnel destination. For services such as Zscaler, this provides better throughput compared to other tunneling mechanisms."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The instructions for installing and managing the plugin can be found ",(0,r.jsx)(n.a,{href:"/docs/plugin_intro#installation-and-management",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The GRE plugin can be configured on an individual router. In order to configure the tunnel, it is important to collect the following information up-front:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Remote tunnel information"}),"\n",(0,r.jsx)(n.li,{children:"Ingress traffic to be sent through the tunnel"}),"\n",(0,r.jsx)(n.li,{children:"WAN interfaces to be used for sending the tunnel traffic"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"remote-gre-tunnel-information",children:"Remote GRE tunnel information"}),"\n",(0,r.jsx)(n.h4,{id:"tunnel-information",children:"Tunnel information"}),"\n",(0,r.jsx)(n.p,{children:"First and foremost, it is important to identify the address and other probe parameter for the remote GRE endpoints."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 gre\n\nconfig\n\n    authority\n\n        router  router1\n            name  router1\n\n            gre\n                enabled       true\n\n                destination   pri-tunnel\n                    name  pri-tunnel\n                    host  192.168.20.13\n                exit\n\n                destination   sec-tunnel\n                    name  sec-tunnel\n                    host  192.168.30.14\n\n                    icmp-keep-alive\n                        link-test-interval  10\n                        number-of-retries   5\n                        retry-interval      5\n                    exit\n                exit\n\n                enabled-node  node1\n                    node-name    node1\n                    tenant       _internal_\n                    destination  pri-tunnel\n                    destination  sec-tunnel\n                exit\n            exit\n        exit\n    exit\nexit\n\nadmin@node1.conductor1#\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above example, you will notice there are two tunnels configured on the router. Each ",(0,r.jsx)(n.code,{children:"destination"})," represents a single tunnel interface and allows the user to configure an IPv4 address for the destination. The ",(0,r.jsx)(n.code,{children:"enabled-node"})," configuration allows the user to control which SSR router node will be operating which tunnel. In addition the ",(0,r.jsx)(n.code,{children:"enabled-node > tenant"})," can be used to apply a specific tenant for the GRE tunnel traffic. For each destination on each enabled-node, the SSR router creates a unique KNI interface and the configured tenant is applied to this interface."]}),"\n",(0,r.jsx)(n.h3,{id:"tunnel-icmp-health-check-parameters",children:"Tunnel ICMP health check parameters"}),"\n",(0,r.jsx)(n.p,{children:"The GRE tunnels do not have an inherent mechanism to detect the availability of remote peers.  As a result, the GRE plugin allows the user to configure ICMP probes to the destination. The configuration is enabled by default with the following settings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"icmp-keep-alive\n    link-test-interval  10\n    number-of-retries   5\n    retry-interval      5\nexit\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The time interval for the attributes are in seconds."})}),"\n",(0,r.jsxs)(n.p,{children:["Every ",(0,r.jsx)(n.code,{children:"link-test-interval"})," an icmp check is performed to determine the availability of the remote tunnel peer. For an unresponsive peer, a total of ",(0,r.jsx)(n.code,{children:"number-of-retries + 1"})," icmp ping attempts will be made within the ",(0,r.jsx)(n.code,{children:"retry-interval"}),". If the peer does not respond to any of these ping attempts, then its considered as down. In the above config, assuming an unresponsive peer, first ping is sent at 10 seconds, followed by 5 more pings at 1 second interval each. In total taking the system about 15 seconds and 6 pings to detect a peer as down. Once a peer is considered down, the next attempt to detect the tunnel liveliness is made after 10 seconds (or the ",(0,r.jsx)(n.code,{children:"link-test-interval"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["In the above example, the two tunnels ",(0,r.jsx)(n.code,{children:"pri-tunnel"})," and ",(0,r.jsx)(n.code,{children:"sec-tunnel"})," create two additional KNI interfaces called ",(0,r.jsx)(n.code,{children:"gre-0"})," and ",(0,r.jsx)(n.code,{children:"gre-1"})," respectively. When a tunnel is determined to be non-responsive, the corresponding ",(0,r.jsx)(n.code,{children:"gre-x"})," interface is brought down. For example, in the above config, when the ",(0,r.jsx)(n.code,{children:"pri-tunnel"})," goes down, the corresponding ",(0,r.jsx)(n.code,{children:"gre-0"})," interface is brought down as well. This allows for traffic to fail over to a secondary tunnel if available. More details on this will be explained later in the document."]}),"\n",(0,r.jsx)(n.h4,{id:"icmp-health-check-to-private-address",children:"ICMP health check to private address"}),"\n",(0,r.jsx)(n.h5,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Release"}),(0,r.jsx)(n.th,{children:"Modification"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.1.0, 2.1.0"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"icmp-keep-alive > address-type"})," was introduced"]})]})})]}),"\n",(0,r.jsxs)(n.p,{children:["Some GRE tunnel providers require the endpoint to ping an internal private address to detect the tunnel liveliness. The ",(0,r.jsx)(n.code,{children:"icmp-keep-alive > address-type"})," can be used to configure a private address for keep-alive detection. Consider the following example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"gre\n    enabled         true\n    plugin-network  192.168.10.0/28\n\n    destination     pri-tunnel\n        name             pri-tunnel\n        host             192.168.20.13\n\n        icmp-keep-alive\n            address-type  custom\n            address       192.168.10.13\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above configuration, the ",(0,r.jsx)(n.code,{children:"address-type > custom"})," is used to set a private icmp-address of ",(0,r.jsx)(n.code,{children:"192.168.10.13"}),". In doing so, the ",(0,r.jsx)(n.a,{href:"#tunnel-icmp-health-check-parameters",children:"icmp-health check algorithm"})," will be run on the private address of ",(0,r.jsx)(n.code,{children:"192.168.10.13"})," instead of the default ",(0,r.jsx)(n.code,{children:"destination > host"}),". The behavior in terms of declaring the tunnel as down and continuous monitoring remains the same."]}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsxs)(n.p,{children:["When using a private ICMP address, its important to also use an in-subnet address for the generated KNIs. This can be accomplished by configuring the appropriate ",(0,r.jsx)(n.code,{children:"plugin-network"})," as illustrated in the example above."]})}),"\n",(0,r.jsx)(n.h3,{id:"ssr-services-to-transport-over-the-tunnel",children:"SSR services to transport over the tunnel"}),"\n",(0,r.jsxs)(n.p,{children:["Next step is to identify the the prefix or the subnet to be transported over the tunnel. In some cases, it might be desirable to transport all internet traffic through the tunnel, so the prefix could be as simple as 0.0.0.0/0. This can be done by capturing the prefix in an SSR service and setting the next-hop as the ",(0,r.jsx)(n.code,{children:"gre-x"})," interfaces. As noted in the ",(0,r.jsx)(n.a,{href:"#tunnel-icmp-health-check-parameters",children:"Tunnel ICMP Health Check Parameters"}),", each destination on a given node corresponds to a ",(0,r.jsx)(n.code,{children:"gre-x"})," inteface. By configuring the next-hop as the appropriate GRE interfaces, it allows the incoming traffic to be service-function chained to a GRE tunnel towards a WAN interface."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority service lan-svc\n\nconfig\n\n    authority\n\n        service  lan-svc\n            name           lan-svc\n            address        192.168.10.0/24\n\n            access-policy  lan\n                source  lan\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 service-route lan-svc-rte-primary\n\nconfig\n\n    authority\n\n        router  router1\n            name           router1\n\n            service-route  lan-svc-rte-primary\n                name          lan-svc-rte-primary\n                service-name  lan-svc\n\n                next-hop      node1 gre-0-intf\n                    node-name   node1\n                    interface   gre-0-intf\n                    gateway-ip  169.254.132.10\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 service-route lan-svc-rte-secondary\n\nconfig\n\n    authority\n\n        router  router1\n            name           router1\n\n            service-route  lan-svc-rte-secondary\n                name          lan-svc-rte-secondary\n                service-name  lan-svc\n\n                next-hop      node1 gre-1-intf\n                    node-name   node1\n                    interface   gre-1-intf\n                    gateway-ip  169.254.132.14\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, all the ",(0,r.jsx)(n.code,{children:"lan"})," tenant traffic in the ",(0,r.jsx)(n.code,{children:"192.168.10.0/24"})," subnet will be sent to the ",(0,r.jsx)(n.code,{children:"gre-0"})," and ",(0,r.jsx)(n.code,{children:"gre-1"})," network interfaces. These ",(0,r.jsx)(n.code,{children:"gre-x-intf"})," are auto generated by the conductor and correspond to the configured destination. In the above config, when the ",(0,r.jsx)(n.code,{children:"gre-0"})," interface will be used as primary target for lan subnet while that tunnel is up. If the ",(0,r.jsx)(n.code,{children:"pri-tunnel"})," goes down, all new sessions will automatically be routed to the ",(0,r.jsx)(n.code,{children:"sec-tunnel"})," via the ",(0,r.jsx)(n.code,{children:"gre-1"})," interface."]}),"\n",(0,r.jsx)(n.h3,{id:"wan-interfaces-for-sending-the-tunnel-packets",children:"WAN interfaces for sending the tunnel packets"}),"\n",(0,r.jsxs)(n.p,{children:["Another piece of configuration that is auto-generated is the service corresponding to the two configured tunnels. In the above example, the two tunnels ",(0,r.jsx)(n.code,{children:"pri-tunnel"})," and ",(0,r.jsx)(n.code,{children:"sec-tunnel"})," will trigger two auto-generated services, one for each of the destination. The generated service will look something like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority service gre_router1__internal__0\n\nconfig\n\n    authority\n\n        service  gre_router1__internal__0\n            name                  gre_router1__internal__0\n\n            applies-to            router\n                type         router\n                router-name  router1\n            exit\n\n            transport             gre\n                protocol  gre\n            exit\n\n            transport             icmp\n                protocol  icmp\n            exit\n            address               192.168.20.13\n\n            access-policy         _internal_\n                source      _internal_\n                permission  allow\n            exit\n            share-service-routes  false\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority service gre_router1__internal__1\n\nconfig\n\n    authority\n\n        service  gre_router1__internal__1\n            name                  gre_router1__internal__1\n\n            applies-to            router\n                type         router\n                router-name  router1\n            exit\n\n            transport             gre\n                protocol  gre\n            exit\n\n            transport             icmp\n                protocol  icmp\n            exit\n            address               192.168.30.14\n\n            access-policy         _internal_\n                source      _internal_\n                permission  allow\n            exit\n            share-service-routes  false\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.p,{children:"The next step, is to configure the service-routes or other routing configuration for these generated services. Typically, such routes are directed towards the WAN interface and user has full control over how & where this traffic can be routed."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 service-route pri_tunnel_rte\n\nconfig\n\n    authority\n\n        router  router1\n            name           router1\n\n            service-route  pri_tunnel_rte\n                name          pri_tunnel_rte\n                service-name  gre_router1__internal__0\n\n                next-hop      node1 dpdk2-wan1-intf\n                    node-name        node1\n                    interface        dpdk2-wan1-intf\n                    source-nat-pool  gre-dpdk2-nat-pool\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 service-route sec_tunnel_rte\n\nconfig\n\n    authority\n\n        router  router1\n            name           router1\n\n            service-route  sec_tunnel_rte\n                name          sec_tunnel_rte\n                service-name  gre_router1__internal__1\n\n                next-hop      node1 dpdk3-wan2-intf\n                    node-name        node1\n                    interface        dpdk3-wan2-intf\n                    source-nat-pool  gre-dpdk3-nat-pool\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.h4,{id:"static-source-nat-considerations",children:"Static Source NAT considerations"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This section can be skipped for WAN interface types of PPPoE and LTE"})}),"\n",(0,r.jsxs)(n.p,{children:["Please note that the ",(0,r.jsx)(n.code,{children:"next-hop"})," is making use of a ",(0,r.jsx)(n.code,{children:"shared-nat-pool"})," called ",(0,r.jsx)(n.code,{children:"gre-dpdk2-nat-pool"})," for example. This nat-pool is necessary for performing a source nat of the GRE tunnel traffic depending on which egress interface are being used."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"network-interface > source-nat"})," flag does not support GRE, hence the ",(0,r.jsx)(n.code,{children:"shared-nat-pool"})," is required."]})}),"\n",(0,r.jsxs)(n.p,{children:["The sample ",(0,r.jsx)(n.code,{children:"shared-nat-pool"})," configuration is as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 nat-pool gre-dpdk2-nat-pool\n\nconfig\n\n    authority\n\n        router  router1\n            name      router1\n\n            nat-pool  gre-dpdk2-nat-pool\n                name          gre-dpdk2-nat-pool\n\n                address-pool  192.168.20.12/32\n                    address      192.168.20.12/32\n                    tenant-name  _internal_\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show config running authority router router1 nat-pool gre-dpdk3-nat-pool\n\nconfig\n\n    authority\n\n        router  router1\n            name      router1\n\n            nat-pool  gre-dpdk3-nat-pool\n                name          gre-dpdk3-nat-pool\n\n                address-pool  192.168.30.12/32\n                    address      192.168.30.12/32\n                    tenant-name  _internal_\n                exit\n            exit\n        exit\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.h3,{id:"other-configuration",children:"Other configuration"}),"\n",(0,r.jsx)(n.h4,{id:"mss-clamping",children:"MSS Clamping"}),"\n",(0,r.jsx)(n.h5,{id:"version-history-1",children:"Version History"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Release"}),(0,r.jsx)(n.th,{children:"Modification"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1.1.0, 2.1.0"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"enforced-mss"})," was introduced"]})]})})]}),"\n",(0,r.jsxs)(n.p,{children:["The TCP MSS (maximum segment size) is the amount of data that the interface is willing to accept in a single TCP segment. This option is negotiated by the client and server based on their local environments. However, tunneling adds extra overhead in terms of packet bytes so its important to be able to adjust the MSS (maximum segment-size) for TCP connections by the routers. By default, the ",(0,r.jsx)(n.code,{children:"enforced-mss"})," is set to be ",(0,r.jsx)(n.code,{children:"path-mtu"})," which allows us to automatically adjust the MSS based on the MTU of the tunnel interface. In addition, user can override the value to a static number as shown in the example below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"gre\n    enabled         true\n    plugin-network  192.168.10.0/28\n\n    destination     dut3-tunnel\n        name             dut3-tunnel\n        host             192.168.20.13\n        enforced-mss     1300\n    exit\nexit\n"})}),"\n",(0,r.jsx)(n.h2,{id:"debugging--troubleshooting",children:"Debugging & Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"config-generation",children:"Config Generation"}),"\n",(0,r.jsxs)(n.p,{children:["When the plugin is installed on the conductor, each commit triggers two scripts called ",(0,r.jsx)(n.code,{children:"generate_confguration"})," and ",(0,r.jsx)(n.code,{children:"generate_pillar"})," to auto-generate KNI, services etc and to generate pillar data for each router. Please check the following locations for debugging information."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Logs for the config and pillar generation for each commit can be found here"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/var/log/128technology/plugins/gre-generate-config.log\n/var/lib/128technology/plugins/pillar/gre/<router>.sls\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gre-tunnel-not-working-on-the-router",children:"GRE Tunnel not working on the router"}),"\n",(0,r.jsxs)(n.p,{children:["When the config and pillar data are successfully generated, a ",(0,r.jsx)(n.code,{children:"t128-setup-gre"})," RPM is installed on the router itself. As part of this process, a script called ",(0,r.jsx)(n.code,{children:"handle_gre_config"})," is executed which will create all the necessary config etc on the running system."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Logs for the config generation on the router can be found here"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/var/log/128technology/plugins/gre-handle-config.log\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Debugging the runtime status of the GRE tunnels can be done by monitoring the journal for the following tags"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"journalctl -t /monitoring_script.par -t /init.par\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For debugging the linux network namespace, here are some of the common commands along with the relevant output of how a healthy system would look like"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ip netns pri-tunnel ip addr"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# ip netns pri-tunnel ip addr\n...\n\n4: pri-tunnel-t0@NONE: <POINTOPOINT,NOARP,UP,LOWER_UP> mtu 1476 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/gre 169.254.132.2 peer 192.168.20.13\n    inet6 fe80::5efe:a9fe:8402/64 scope link\n       valid_lft forever preferred_lft forever\n108: pri-tunnel: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether ca:9f:53:9a:de:c2 brd ff:ff:ff:ff:ff:ff\n    inet 169.254.132.2/30 brd 169.254.132.3 scope global pri-tunnel\n       valid_lft forever preferred_lft forever\n    inet6 fe80::c89f:53ff:fe9a:dec2/64 scope link\n       valid_lft forever preferred_lft forever\n110: gre-0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 9e:20:89:e4:49:3f brd ff:ff:ff:ff:ff:ff\n    inet 169.254.132.10/30 brd 169.254.132.11 scope global gre-0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::9c20:89ff:fee4:493f/64 scope link\n       valid_lft forever preferred_lft forever\n"})}),"\n",(0,r.jsx)(n.p,{children:"** ip netns pri-tunnel ip route show table all **"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# ip netns pri-tunnel ip route show table all\ndefault via 169.254.132.9 dev gre-0 table 128\ndefault dev pri-tunnel-t0 scope link\n192.168.20.13 via 169.254.132.1 dev pri-tunnel\n169.254.0.0/16 dev pri-tunnel scope link metric 1108\n169.254.0.0/16 dev gre-0 scope link metric 1110\n169.254.132.0/30 dev pri-tunnel proto kernel scope link src 169.254.132.2\n169.254.132.8/30 dev gre-0 proto kernel scope link src 169.254.132.10\n"})}),"\n",(0,r.jsx)(n.p,{children:"** ip netns pri-tunnel ip rule list **"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# ip netns pri-tunnel ip rule list\n0:      from all lookup local\n32765:  from all iif pri-tunnel-t0 lookup 128\n32766:  from all lookup main\n32767:  from all lookup default\n"})}),"\n",(0,r.jsx)(n.p,{children:"** ip netns exec pri-tunnel iptables -nvL **"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# ip netns exec pri-tunnel iptables -nvL\nChain INPUT (policy ACCEPT 13167 packets, 474K bytes)\n pkts bytes target     prot opt in     out     source               destination\n\nChain FORWARD (policy ACCEPT 0 packets, 0 bytes)\n pkts bytes target     prot opt in     out     source               destination\n    0     0 TCPMSS     tcp  --  pri-tunnel-t0 *       0.0.0.0/0            0.0.0.0/0            tcp flags:0x06/0x02 TCPMSS clamp to PMTU\n\nChain OUTPUT (policy ACCEPT 14014 packets, 505K bytes)\n pkts bytes target     prot opt in     out     source               destination\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tunnel-operation",children:"Tunnel operation"}),"\n",(0,r.jsx)(n.p,{children:"The status of the tunnel and other data is available via the auto generated tunnel interfaces. Here's an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"admin@node1.conductor1# show device-interface router router1 name pri-tunnel\nTue 2020-03-24 03:22:37 UTC\n\n===========================================\n node1.router1:pri-tunnel\n===========================================\n Type:                host\n Forwarding:          true\n Mode:                host\n MAC Address:         ea:a6:fe:1c:3d:70\n\n Admin Status:        up\n Operational Status:  up\n Redundancy Status:   non-redundant\n Speed:               1000\n\n in-octets:                     6243918\n in-unicast-pkts:                104054\n in-errors:                           0\n out-octets:                    4691030\n out-unicast-pkts:               100393\n out-errors:                          0\n\n GRE::\n   icmp-probe-status:\n     attempts:        45008\n     elapsed:         0.006435333052650094\n     last_attempt:    1585020151.1222534\n     status:          up\n   stats:\n     RX errors::\n       crc:           0\n       fifo:          0\n       frame:         0\n       length:        0\n       missed:        0\n     RX::\n       bytes:         380\n       dropped:       0\n       errors:        0\n       mcast:         0\n       overrun:       0\n       packets:       7\n     TX errors::\n       aborted:       0\n       fifo:          0\n       heartbeat:     0\n       transns:       0\n       window:        0\n     TX::\n       bytes:         692\n       carrier:       106\n       collsns:       4\n       dropped:       0\n       errors:        110\n       packets:       11\n\nCompleted in 0.07 seconds\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In addition, a ",(0,r.jsx)(n.code,{children:"ping-monitor"})," service is started for each configured tunnel, the ",(0,r.jsx)(n.code,{children:"systemctl status ping-monitor-namespace@<tunnel-name>"})," can be used to query the status of the ping service."]}),"\n",(0,r.jsx)(n.h2,{id:"release-notes",children:"Release Notes"}),"\n",(0,r.jsx)(n.h3,{id:"release-301",children:"Release 3.0.1"}),"\n",(0,r.jsx)(n.h4,{id:"issues-fixed",children:"Issues Fixed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-1322"})," GRE plugin was not cleaning up directories on uninstall"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The salt directories will be removed appropriately on plugin uninstall"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-1480"})," Large configuration was causing plugin config generation to fail"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution:"})})," The config generation logic for the plugin will handle config with long lines correctly"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-1571"})," GRE tunnel configuration fails to validate on upgrade to 5.4.0 and greater"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution"})})," The ip-addresses for generated KNI will now be consistent between 5.1.0 and 5.4.0 versions of software"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"release-300",children:"Release 3.0.0"}),"\n",(0,r.jsx)(n.h4,{id:"issues-fixed-1",children:"Issues Fixed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-768"})," Support the GRE plugin in SSR versions ",(0,r.jsx)(n.code,{children:"5.1.0"})," and greater."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-611"})," Added support for plugin state. Plugin state information can be accessed on the PCLI using ",(0,r.jsx)(n.code,{children:"show plugins state [router <router>] [node <node>] [{detail | summmary}] 128T-gre"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"release-113-213",children:"Release 1.1.3, 2.1.3"}),"\n",(0,r.jsx)(n.h4,{id:"issues-fixed-2",children:"Issues Fixed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-799"})," Pillar data for GRE tunnel is false by default"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution"})})," Set the enabled key to true by default when generating the pillar data"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-479"})," Address range checking not valid for GRE tunnel"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution"})})," Use non-strict mode when getting plugin network in config generation"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"release-112-212",children:"Release 1.1.2, 2.1.2"}),"\n",(0,r.jsx)(n.h4,{id:"issues-fixed-3",children:"Issues Fixed"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PLUGIN-677"})," GRE plugin doesn't start up correctly post reboot"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Resolution"})})," Implemented a config watcher service to handle startup conditions and dynamically apply configuration changes at runtime."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);