"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[961],{93096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=n(74848),o=n(28453);const i={title:"Session Timers",sidebar_label:"Session Timers"},r=void 0,c={id:"concepts_session_timer",title:"Session Timers",description:"When packets stop arriving on the flows of a session, the SSR will clear the session after a period of time. The amount of time depends on the type of traffic.",source:"@site/docs/concepts_session_timer.md",sourceDirName:".",slug:"/concepts_session_timer",permalink:"/docs/concepts_session_timer",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1710776226,formattedLastUpdatedAt:"Mar 18, 2024",frontMatter:{title:"Session Timers",sidebar_label:"Session Timers"},sidebar:"docs",previous:{title:"PCLI",permalink:"/docs/concepts_pcli"},next:{title:"Service and Topology Exchange Protocol (STEP)",permalink:"/docs/concepts_STEP"}},a={},l=[{value:"Session Type Timeout",id:"session-type-timeout",level:2},{value:"Default Timeout",id:"default-timeout",level:2},{value:"TCP Timeout",id:"tcp-timeout",level:2}];function p(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"When packets stop arriving on the flows of a session, the SSR will clear the session after a period of time. The amount of time depends on the type of traffic."}),"\n",(0,s.jsx)(t.h2,{id:"session-type-timeout",children:"Session Type Timeout"}),"\n",(0,s.jsx)(t.p,{children:"The time the router will wait before removing the session is governed by the timeout value in the session-type matched by the traffic."}),"\n",(0,s.jsxs)(t.p,{children:["For example, the following configuration examples show the session-types for ",(0,s.jsx)(t.code,{children:"DNS"})," and ",(0,s.jsx)(t.code,{children:"SSH"}),". Their timeouts are ",(0,s.jsx)(t.code,{children:"5000"})," milliseconds and ",(0,s.jsx)(t.code,{children:"1900000"})," milliseconds respectively:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"session-type                   DNS\n    name            DNS\n    service-class   NetworkControl\n    timeout         5000\n    nat-keep-alive  false\n\n    transport       udp\n        protocol    udp\n\n        port-range  53\n            start-port  53\n        exit\n    exit\n\n    transport       tcp\n        protocol    tcp\n\n        port-range  53\n            start-port  53\n        exit\n    exit\nexit\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"session-type                   SSH\n    name            SSH\n    service-class   OAM\n    timeout         1900000\n    nat-keep-alive  false\n\n    transport       udp\n        protocol    udp\n\n        port-range  22\n            start-port  22\n        exit\n    exit\n\n    transport       tcp\n        protocol    tcp\n\n        port-range  22\n            start-port  22\n        exit\n    exit\nexit\n"})}),"\n",(0,s.jsx)(t.h2,{id:"default-timeout",children:"Default Timeout"}),"\n",(0,s.jsx)(t.p,{children:"For traffic which does not match any session type, the following default timeout values are used:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"TCP  - 1900000 ms"}),"\n",(0,s.jsx)(t.li,{children:"UDP  - 180000 ms"}),"\n",(0,s.jsx)(t.li,{children:"ICMP - 10000 ms"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"tcp-timeout",children:"TCP Timeout"}),"\n",(0,s.jsx)(t.p,{children:"For a session using TCP, the SSR examines the state of the flows. When first TCP packets arrive, the flows for the session are given a timeout of 10s. Once the connection reaches an established state, the timeout for the flows are updated to the default or configured session-type timeout value."})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);