"use strict";(self.webpackChunk_128t_docs=self.webpackChunk_128t_docs||[]).push([[7203],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=s.createContext({}),l=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,g=d["".concat(c,".").concat(h)]||d[h]||u[h]||r;return n?s.createElement(g,o(o({ref:t},p),{},{components:n})):s.createElement(g,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43506:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var s=n(87462),a=n(63366),r=(n(67294),n(3905)),o=["components"],i={title:"Troubleshooting Session Processing",sidebar_label:"Session Processing"},c=void 0,l={unversionedId:"ts_session_processing",id:"ts_session_processing",title:"Troubleshooting Session Processing",description:"Session Smart Routers behave as both a firewall and a router. It is in its name \u2013 to be session smart \u2013 where the platform can apply a surgical amount of policy, treatment, and offer a rich amount of application data for use in understanding network performance.",source:"@site/docs/ts_session_processing.md",sourceDirName:".",slug:"/ts_session_processing",permalink:"/docs/ts_session_processing",draft:!1,tags:[],version:"current",lastUpdatedAt:1702328937,formattedLastUpdatedAt:"Dec 11, 2023",frontMatter:{title:"Troubleshooting Session Processing",sidebar_label:"Session Processing"},sidebar:"docs",previous:{title:"Serial Console Troubleshooting",permalink:"/docs/ts_serial_console_tsing"},next:{title:"T1 Troubleshooting",permalink:"/docs/ts_t1_troubleshooting"}},p={},u=[{value:"Session Processing on the Session Smart Router",id:"session-processing-on-the-session-smart-router",level:2},{value:"Enabling Multi-Threading",id:"enabling-multi-threading",level:3},{value:"Examining Utilization of Session Processing Threads",id:"examining-utilization-of-session-processing-threads",level:3},{value:"SSR Versions &lt; 6.1",id:"ssr-versions--61",level:4},{value:"SSR Versions &gt;= 6.1",id:"ssr-versions--61-1",level:4},{value:"Understanding CLI Output",id:"understanding-cli-output",level:3},{value:"Creating a Dashboard for Active Monitoring",id:"creating-a-dashboard-for-active-monitoring",level:3}],d={toc:u};function h(e){var t=e.components,i=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,s.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Session Smart Routers behave as both a firewall and a router. It is in its name \u2013 to be session smart \u2013 where the platform can apply a surgical amount of policy, treatment, and offer a rich amount of application data for use in understanding network performance."),(0,r.kt)("h2",{id:"session-processing-on-the-session-smart-router"},"Session Processing on the Session Smart Router"),(0,r.kt)("p",null,"When it comes to determining proper performance and utilization of an SSR, you must look at three characteristics:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Throughput"),(0,r.kt)("li",{parentName:"ul"},"Session Capacity"),(0,r.kt)("li",{parentName:"ul"},"Connections per second (CPS)")),(0,r.kt)("p",null,"This document focuses on the last of these three factors, CPS, and understanding its utilization related to the SSR's ability to process sessions."),(0,r.kt)("p",null,"Connections per second influence how quickly the SSR can create, modify, and store a new session. Every system has a maximum session processing rate that is governed by the platform on which it runs. In SSR software versions prior to 6.1, session processing is single-threaded and is rate-limited by CPU clock speed and overall CPU busy-ness (as the OS scheduler delegates compute cycles to this task). In software versions 6.1 and beyond, session processing is multi-threaded and can take advantage of additional host cores. The SSR uses an RSS hashing mechanism to distribute traffic into the session processing threads based on the five tuples of packet (source IP, source port, destination IP, destination port, protocol)."),(0,r.kt)("p",null,"The session processing thread is responsible for session setup and modify operations. Modify operations are performed for a flow move (peer path failure or SLA violation) or with the use of application identification which updates the session after DPI. The session processing thread has a buffer queue for handling bursts of traffic or when the thread is \u201cbacked up\u201d. As the queue fills up, latency increases for all packets in the queue. This will translate into end-to-end latency within the network. Always scale the system with ample headroom to handle peak session processing load."),(0,r.kt)("p",null,"The SSR should be operating at no more than 80% utilization of its session processing threads, allowing it to handle bursty conditions that are triggered as a result of path migrations. When a path failure occurs, or a service is no longer within SLA, the SSR modifies existing sessions to ensure they are traversing the optimal pathway. For systems carrying considerable load, this could be many thousands of sessions that need to be updated."),(0,r.kt)("h3",{id:"enabling-multi-threading"},"Enabling Multi-Threading"),(0,r.kt)("p",null,"While SSR software versions 6.1.x support multi-threading for session processing, it is not enabled by default. Reference the ",(0,r.kt)("a",{parentName:"p",href:"/docs/config_reference_guide#session-setup-scaling"},"Configuration Element Reference guide")," for details on the configuration parameters. Note that this feature must be enabled on both nodes if operating in a HA cluster."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"It is not recommended to set ",(0,r.kt)("inlineCode",{parentName:"p"},"session-processor-mode")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"manual")," unless instructed by a member of Juniper support or the engineering team to ensure that this value is right-sized for the environment.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"config authority router <router-name> node <node-name> session-setup-scaling   true\nconfig authority router <router-name> node <node-name> session-processor-mode  automatic\n")),(0,r.kt)("p",null,"Once the configuration changes have been made and committed, a restart of the SSR service is required for the changes to take effect."),(0,r.kt)("h3",{id:"examining-utilization-of-session-processing-threads"},"Examining Utilization of Session Processing Threads"),(0,r.kt)("p",null,"To view and understand host CPU usage, you must look at the individual session processing threads ",(0,r.kt)("em",{parentName:"p"},"as well as")," the other threads in the system. This is due to how the OS scheduler works, distributing compute cycles to available CPUs."),(0,r.kt)("h4",{id:"ssr-versions--61"},"SSR Versions < 6.1"),(0,r.kt)("p",null,"In software versions prior to 6.1, examine the utilization of the ",(0,r.kt)("strong",{parentName:"p"},"PacketProcessing")," thread by viewing the output of the command ",(0,r.kt)("inlineCode",{parentName:"p"},"top -H d 1.0 | grep PacketProcess")," from the OS shell, as seen below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[centos@SOL-DL360-DUT1 ~]$ top -H d 1.0 | grep PacketProcess\n 8590 root      20   0  265.2g   7.2g 113312 S 41.2  2.9 177:25.82 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 S 39.8  2.9 177:26.23 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 R 42.2  2.9 177:26.66 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 S 42.7  2.9 177:27.10 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 R 41.2  2.9 177:27.52 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 R 37.3  2.9 177:27.90 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 R 46.6  2.9 177:28.38 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 R 52.0  2.9 177:28.91 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 S 56.3  2.9 177:29.49 PacketProcessin\n 8590 root      20   0  265.2g   7.2g 113312 R 61.8  2.9 177:30.12 PacketProcessin\n")),(0,r.kt)("h4",{id:"ssr-versions--61-1"},"SSR Versions >= 6.1"),(0,r.kt)("p",null,"In software versions 6.1 and greater, the session processing thread(s) are named ",(0,r.kt)("inlineCode",{parentName:"p"},"Session-Proc-XX")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"XX")," is a zero-based index of the number of threads allocated to session processing. An easy way to view the number of threads allocated to session processing as well as seeing current utilization is to run the command ",(0,r.kt)("inlineCode",{parentName:"p"},'show stats process thread process-name highway | grep SessionProc | grep "cpu usage"'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'admin@test1.combo1# show stats process thread process-name highway | grep SessionProc | grep "cpu usage"\n\u2714 Piping output...\n cpu usage             test1   highway        SessionProc-00         61.8\n cpu usage             test1   highway        SessionProc-01           55\n cpu usage             test1   highway        SessionProc-02           48\n cpu usage             test1   highway        SessionProc-03         40.6\n cpu usage             test1   highway        SessionProc-04         30.2\n cpu usage             test1   highway        SessionProc-05           20\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Top")," can be used to follow the session processing threads:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[centos@SOL-DL360-DUT1 ~]$ top -H d 1.0 | grep SessionProc\n 7532 root      20   0  266.9g   8.8g 120940 S 60.0  3.5  39:48.64 SessionProc-00                                                                 \n 7533 root      20   0  266.9g   8.8g 120940 R 55.0  3.5  37:18.75 SessionProc-01                                                     \n 7534 root      20   0  266.9g   8.8g 120940 S 55.0  3.5  34:42.19 SessionProc-02                                                       \n 7535 root      20   0  266.9g   8.8g 120940 S 45.0  3.5  31:33.67 SessionProc-03                                                          \n 7536 root      20   0  266.9g   8.8g 120940 S 35.0  3.5  27:27.56 SessionProc-04                                                          \n 7537 root      20   0  266.9g   8.8g 120940 S 20.0  3.5  22:51.79 SessionProc-05\n")),(0,r.kt)("h3",{id:"understanding-cli-output"},"Understanding CLI Output"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Service Area")," is the informal name given to the business logic responsible for session processing. The set of stats related to ",(0,r.kt)("inlineCode",{parentName:"p"},"internal-application")," of Service Area processing are valuable to understand system behavior. These stats are monotonically increasing scalar values; you will need to compare deltas over two periods of time to get an accurate view of rate. In particular, ",(0,r.kt)("inlineCode",{parentName:"p"},"schedule-failure")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sent-timeout")," are signs that the session processing is unable to keep up with load or unable to handle bursty traffic patterns."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'admin@test1.combo1# show stats traffic-eng internal-application internal-application "Service Area"\nWed 2023-10-18 17:03:48 UTC\n\u2714 Retrieving statistics...\n\nInternal Application Traffic Engineering Stats\n----------------------------------------------\n\n==================================================== ======= ====================== =============\n Metric                                               Node    Internal-application         Value\n==================================================== ======= ====================== =============\n per-traffic-class buffer-capacity-exceeded-packets   test1   Service Area                     0\n per-traffic-class dequeue-aqm-drop-packets           test1   Service Area                     0\n per-traffic-class dequeue-max-latency-drop-packets   test1   Service Area                     0\n per-traffic-class dequeue-success-packets            test1   Service Area              24113256\n per-traffic-class schedule-failure-packets           test1   Service Area                     0\n per-traffic-class schedule-success-packets           test1   Service Area              24113256\n schedule-failure                                     test1   Service Area                     0\n schedule-success                                     test1   Service Area              24114030\n scheduler-reset                                      test1   Service Area                     0\n sent-retry                                           test1   Service Area           32121873138\n sent-success                                         test1   Service Area              24113708\n sent-timeout                                         test1   Service Area                     0\n\nCompleted in 0.03 seconds\n')),(0,r.kt)("p",null,"SSR software version 6.1 introduces the thread-specific metrics ",(0,r.kt)("inlineCode",{parentName:"p"},"show stats process thread process-name highway thread-name"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"admin@test1.combo1# show stats process thread process-name highway thread-name SessionProc-00\nWed 2023-10-18 17:01:07 UTC\n\u2714 Retrieving statistics...\n\nProcess Thread Metrics\n----------------------\n\n===================== ======= ============== ================ =========\n Metric                Node    Process-name   Thread-name        Value\n===================== ======= ============== ================ =========\n cpu iowait            test1   highway        SessionProc-00         0\n cpu system-usage      test1   highway        SessionProc-00       9.2\n cpu usage             test1   highway        SessionProc-00        63\n cpu user-usage        test1   highway        SessionProc-00      53.8\n queue delay           test1   highway        SessionProc-00        59\n queue depth           test1   highway        SessionProc-00         0\n queue total           test1   highway        SessionProc-00   8355742\n task errors           test1   highway        SessionProc-00         0\n task execution-time   test1   highway        SessionProc-00       389\n task total            test1   highway        SessionProc-00   8363312\n\nCompleted in 0.02 seconds\n")),(0,r.kt)("p",null,"The units for ",(0,r.kt)("inlineCode",{parentName:"p"},"queue delay")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"task execution-time")," are in microseconds.\nAll values are rolling averages, except for ",(0,r.kt)("inlineCode",{parentName:"p"},"queue total")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"task total")," which are counters."),(0,r.kt)("p",null,"The values ",(0,r.kt)("inlineCode",{parentName:"p"},"cpu system-usage"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"cpu usage"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"cpu user-usage")," are percentages and indicate utilization of the service area thread performing session setup."),(0,r.kt)("p",null,"High values for queue depth and queue delay, coupled with high CPU usage values, are indicative of the service area threads not keeping up."),(0,r.kt)("h3",{id:"creating-a-dashboard-for-active-monitoring"},"Creating a Dashboard for Active Monitoring"),(0,r.kt)("p",null,"Creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"Custom Report")," on the Conductor is strongly recommended for each head-end router in an authority. Head-ends are central aggregation points for traffic and typically have the highest utilization and blast radius."),(0,r.kt)("p",null,"To create a custom report, use the following procedure:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the Conductor GUI, navigate to ",(0,r.kt)("inlineCode",{parentName:"li"},"CUSTOM REPORTS"),"."),(0,r.kt)("li",{parentName:"ol"},"Click on ",(0,r.kt)("inlineCode",{parentName:"li"},"NEW")," in the top-right corner. "),(0,r.kt)("li",{parentName:"ol"},"Select ",(0,r.kt)("inlineCode",{parentName:"li"},"New Empty Report"),". "),(0,r.kt)("li",{parentName:"ol"},"Name the report. For example: ",(0,r.kt)("inlineCode",{parentName:"li"},"Session Processing Utilization - <Router Name>")," (where ",(0,r.kt)("inlineCode",{parentName:"li"},"<Router Name>")," is the name of the router on which these reports will be customized).")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Time series graphs of per-thread utilization are only available on SSR software starting with 6.1.")),(0,r.kt)("p",null,"The graph shows time series thread utilization of session processing threads. This graph can be customized per router, per node, per process, and each SessionProc thread.\nWhen building this graph, make sure to include each of the running ",(0,r.kt)("inlineCode",{parentName:"p"},"SessionProc")," threads.\n",(0,r.kt)("img",{alt:"Session Processing Thread Utilization",src:n(28741).Z,width:"2301",height:"1022"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Metric:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"process/thread/cpu/usage")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Series:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Router <router-name> Node <node-name> Process Name 'highway' Thread Name 'SessionProc-XX'")),(0,r.kt)("p",null,"To ensure a holistic view of session processing along with the stated above, looking that the utilization of all the other threads is important. It is valuable to determine if other processes are starving out the session processing threads.\n",(0,r.kt)("img",{alt:"Host CPU Utilization - All Threads",src:n(98139).Z,width:"2294",height:"654"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Metric:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"process/thread/cpu/usage")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Series:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"All for Selected Router")),(0,r.kt)("p",null,"On a production system there will be a non-zero value of packets waiting in a queue to be processed by the session processing threads. When this value increases steadily and remains at a steady state, this indicates that the system is unable to keep up with load. The following graph shows the queue depth for all packets destined for session processing. Note that this graph requires a custom series with the router, node, process and thread name specified according to the image below.\n",(0,r.kt)("img",{alt:"Session Processing Queue Depth",src:n(59965).Z,width:"2296",height:"696"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Metric:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"process/thread/queue/depth")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Series:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Router <router-name> Node <node-name> Process Name 'highway' Thread Name 'SessionPipeline'")),(0,r.kt)("p",null,"Queue delay represents the average amount of time (in microseconds) packets are waiting to be processed. When this value is steadily increasing, this indicates that the system is unable to keep up with load. The following graph shows the average time packets are waiting to be processed. Note that this graph requires a custom series with the router, node, process and thread name specified according to the image below.\n",(0,r.kt)("img",{alt:"Session Processing Queue Delay",src:n(71563).Z,width:"2295",height:"702"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Metric:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"process/thread/queue/delay")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Series:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Router <router-name> Node <node-name> Process Name 'highway' Thread Name 'SessionPipeline'")),(0,r.kt)("p",null,"The Session Processing threads operate on packets that either create or modify a session. In a steady-state environment, the majority of packets arriving to the ",(0,r.kt)("strong",{parentName:"p"},"Service Area")," are ",(0,r.kt)("em",{parentName:"p"},"first packets")," that create a session. A KPI valuable for determining (at least partial) load of the session processing threads is ",(0,r.kt)("inlineCode",{parentName:"p"},"session-arrival-rate"),", or the rate at which new sessions are being setup.\n",(0,r.kt)("img",{alt:"Session Arrival Rate",src:n(58313).Z,width:"2302",height:"671"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Metric:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregate-session/node/session-arrival-rate")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Series:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"All for Selected Router")),(0,r.kt)("p",null,"When the session processing queue overflows or packets exceed their maximum time waiting in the queue, they are dropped so that clients can re-transmit the packet. Timeouts on their own do not indicate an overloaded SSR as bursts always happen in a network during network churn. However, if this value is steadily increasing it can mean that the SSR is unable to keep up with session processing load.\n",(0,r.kt)("img",{alt:"Service Area Scheduling Timeouts",src:n(65187).Z,width:"2297",height:"666"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Metric:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"traffic-eng/internal-application/sent-timeout")," ",(0,r.kt)("br",null),"\n",(0,r.kt)("strong",{parentName:"p"},"Series:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"All for Selected Router")))}h.isMDXComponent=!0},98139:function(e,t,n){t.Z=n.p+"assets/images/ts_sp_host_cpu_thread_utilization-198c467d595d16aabcf0dfbb5b3f532b.png"},65187:function(e,t,n){t.Z=n.p+"assets/images/ts_sp_service_area_schedule_timeouts-96c402566fa9674953ff3a3612bfc67b.png"},58313:function(e,t,n){t.Z=n.p+"assets/images/ts_sp_session_arrival_rate-5531c1d6111b29c07bfe01bc6d2d8edc.png"},71563:function(e,t,n){t.Z=n.p+"assets/images/ts_sp_session_processing_queue_delay-f8fe24a3be66839f660ac13448d37b9f.png"},59965:function(e,t,n){t.Z=n.p+"assets/images/ts_sp_session_processing_queue_depth-fde7a3e6413be09cda525f33fd86fa94.png"},28741:function(e,t,n){t.Z=n.p+"assets/images/ts_sp_session_processing_thread_utilization-95b4282ece540089c6debcbc2d212dda.png"}}]);