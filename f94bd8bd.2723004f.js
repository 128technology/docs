(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{212:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(6),r=(n(0),n(222)),o={title:"Configuring BGP",sidebar_label:"Configuring BGP"},s={unversionedId:"config_bgp",id:"config_bgp",isDocsHomePage:!1,title:"Configuring BGP",description:"The Border Gateway Protocol (BGP) is a standard exterior gateway protocol developed for exchanging routing and reachability information between Autonomous Systems, a collection of IP routing prefixes managed by a single administrative entity. BGP makes routing decisions based on paths and network policies; although historically mainly seen in service provider networks, it is now gaining acceptance in large enterprise networks. BGP can also be used for routing within an autonomous system as an interior gateway protocol; when doing so it is referred to as iBGP.",source:"@site/docs/config_bgp.md",slug:"/config_bgp",permalink:"/docs/config_bgp",version:"current",lastUpdatedAt:1623421757,sidebar_label:"Configuring BGP",sidebar:"docs",previous:{title:"Asset Connection Resiliency",permalink:"/docs/config_asset_connection_resiliency"},next:{title:"VRF Learning via BGP",permalink:"/docs/config_vrf_learning"}},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Peering with non-128T Routers",id:"peering-with-non-128t-routers",children:[]},{value:"Advertising Routes",id:"advertising-routes",children:[]},{value:"BGP over SVR (BGPoSVR)",id:"bgp-over-svr-bgposvr",children:[{value:"Verifying the BGP Configuration",id:"verifying-the-bgp-configuration",children:[]}]},{value:"VRF BGP Over SVR",id:"vrf-bgp-over-svr",children:[{value:"Configuration Example",id:"configuration-example-1",children:[]},{value:"Troubleshooting",id:"troubleshooting",children:[]}]},{value:"Routing Features",id:"routing-features",children:[{value:"Configuring 128T as a Route Reflector",id:"configuring-128t-as-a-route-reflector",children:[]},{value:"BGP Confederations",id:"bgp-confederations",children:[]}]}],l={rightToc:c};function b(e){var t=e.components,o=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,o,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The Border Gateway Protocol (BGP) is a standard exterior gateway protocol developed for exchanging routing and reachability information between Autonomous Systems, a collection of IP routing prefixes managed by a single administrative entity. BGP makes routing decisions based on paths and network policies; although historically mainly seen in service provider networks, it is now gaining acceptance in large enterprise networks. BGP can also be used for routing within an autonomous system as an interior gateway protocol; when doing so it is referred to as iBGP."),Object(r.b)("p",null,'Learning routes from BGP simplifies enterprise configuration and integration with Secure Vector Routing. In this configuration guide we will also discuss a 128T-specific feature referred to as "BGP over SVR" (or BGPoSVR), which combines the power of Secure Vector Routing with the rich feature set of the BGP protocol.'),Object(r.b)("h3",{id:"prerequisites"},"Prerequisites"),Object(r.b)("p",null,"This section presumes that the reader has a running 128T system and wants to add configuration to support BGP. The running 128T system should already include configuration for basic platform functionality (e.g., ",Object(r.b)("inlineCode",{parentName:"p"},"router"),", ",Object(r.b)("inlineCode",{parentName:"p"},"node"),", ",Object(r.b)("inlineCode",{parentName:"p"},"device-interface"),", ",Object(r.b)("inlineCode",{parentName:"p"},"network-interface"),") and basic 128T modeling configuration (e.g., tenants, services, etc.). Refer to the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/config_reference_guide"}),"Element Reference")," section of our documentation for a better understanding about basics of the 128T data model."),Object(r.b)("h3",{id:"peering-with-non-128t-routers"},"Peering with non-128T Routers"),Object(r.b)("p",null,"The BGP configuration exists in the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/config_reference_guide#routing"}),Object(r.b)("inlineCode",{parentName:"a"},"routing"))," configuration container within the 128T data model. For any routing configuration, static or dynamic, a default routing instance called ",Object(r.b)("inlineCode",{parentName:"p"},"default-instance")," must be defined in the 128T configuration."),Object(r.b)("p",null,"In this example we will assume that BGP is configured on the peering router with IP address 1.1.1.1, as autonomous system number (ASN) 6000. "),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"To peer the 128T router with this router, configure BGP on our 128T using the following commands:")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# config auth\nadmin@branchoffice1.seattlesite1 (authority)# router seattlesite1 \nadmin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\n")),Object(r.b)("p",null,"Every 128T router (in this case, the router named ",Object(r.b)("inlineCode",{parentName:"p"},"seattlesite1"),"), contains all of its legacy routing protocol information within the ",Object(r.b)("inlineCode",{parentName:"p"},"default-instance")," routing container."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing-protocol bgp\n")),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Enter into the BGP portion of the routing configuration model; set the local autonomous system number to 100, and set the router ID to 1.1.1.128.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# local-as 100\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# router-id 1.1.1.128\n")),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"Configure the ",Object(r.b)("inlineCode",{parentName:"li"},"address-family")," using ",Object(r.b)("inlineCode",{parentName:"li"},"ipv4-unicast"),". At least one ",Object(r.b)("inlineCode",{parentName:"li"},"address-family"),"must be configured, and typically is set as ",Object(r.b)("inlineCode",{parentName:"li"},"ipv4-unicast"),". If your deployment uses other address families (e.g., IPv6) or routes multicast, you may also need to configure support for other address families.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\n")),Object(r.b)("p",null,'Address families are also sometimes referred to as "AFI-SAFI" (pronounced "affy-saffy"), which is an Address Family Indicator plus Sub-Address Family Indicator. '),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"Configure the ",Object(r.b)("inlineCode",{parentName:"li"},"neighbor"),". In the example here, we've identified its IP address as ",Object(r.b)("inlineCode",{parentName:"li"},"1.1.1.1")," and its ASN as 6000. (Because this neighbor has a different ASN than the 128T, the 128T will recognize it as an eBGP peer rather than an iBGP peer.) An ",Object(r.b)("inlineCode",{parentName:"li"},"address-family")," of ",Object(r.b)("inlineCode",{parentName:"li"},"ipv4-unicast"),", lets the 128T know to exchange IPv4 unicast routes with the peer.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# neighbor 1.1.1.1\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# neighbor-as 6000\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# next-hop-self true\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])#exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# exit\n")),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"Set ",Object(r.b)("inlineCode",{parentName:"li"},"next-hop-self")," to ",Object(r.b)("inlineCode",{parentName:"li"},"true.")," During advertisement, non-directly connected routers need to learn how to reach an advertised route. To provide this information to the non-directly connected (as well as iBGP peers), next-hop-self command is used. This will cause the 128T to rewrite the ",Object(r.b)("inlineCode",{parentName:"li"},"next-hop")," information in the routes it advertises to this peer to be its own address.")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"In the example above, we've set our router's AS to 100. This will apply to all neighbors as the \"default\" AS it will advertise. You can override this on a per-neighbor basis by setting ",Object(r.b)("inlineCode",{parentName:"p"},"local-as")," within the ",Object(r.b)("inlineCode",{parentName:"p"},"neighbor")," configuration to a different value. However, ",Object(r.b)("em",{parentName:"p"},"you must not configure the same value within the neighbor as you've already set in your global configuration"),". This may cause issues when attempting to establish a peering relationship."))),Object(r.b)("ol",{start:6},Object(r.b)("li",{parentName:"ol"},"Use the ",Object(r.b)("inlineCode",{parentName:"li"},"exit")," command several times to return to the ",Object(r.b)("inlineCode",{parentName:"li"},"routing-protocol")," level of the configuration hierarchy, and issue the ",Object(r.b)("inlineCode",{parentName:"li"},"show")," command. Your configuration should look something like this:")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# show\ntype bgp\nlocal-as 100\nrouter-id 1.1.1.128\n\naddress-family  ipv4-unicast\n    afi-safi  ipv4-unicast\nexit\n\nneighbor        1.1.1.1\n    neighbor-address  1.1.1.1\n    neighbor-as       6000\n    shutdown          false\n    \n    address-family    ipv4-unicast\n        afi-safi      ipv4-unicast\n        next-hop-self true\n    exit\nexit\n")),Object(r.b)("h3",{id:"advertising-routes"},"Advertising Routes"),Object(r.b)("p",null,"There are two ways to advertise routes into BGP:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Using ",Object(r.b)("inlineCode",{parentName:"li"},"network")," statements to identify the prefixes you want to advertise"),Object(r.b)("li",{parentName:"ul"},"Redistributing routes learned through other IGP or from configuration")),Object(r.b)("h4",{id:"using-the-network-statement"},"Using the ",Object(r.b)("inlineCode",{parentName:"h4"},"network")," Statement"),Object(r.b)("p",null,"To advertise routes to BGP, configure the network to be advertised under the address-family of the router. You may also apply a policy to the advertised route using  \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tcommand."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You can apply policies to these routes (i.e., policy and filters) individually. Policies are configured within the authority-level ",Object(r.b)("inlineCode",{parentName:"p"},"routing")," configuration at ",Object(r.b)("inlineCode",{parentName:"p"},"config > authority > routing > filter")," and ",Object(r.b)("inlineCode",{parentName:"p"},"config > authority > routing > policy"),". For more information, refer to the section in our documentation on Filters and Policies."))),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"**admin@branchoffice1.seattlesite1# config auth admin@branchoffice1.seattlesite1 (authority)# router seattlesite1 admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\n admin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing-protocol bgp\n admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# address- family ipv4-unicast\n admin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# network 172.16.255.0/30\n admin@branchoffice1.seattlesite1 (network[network- address=172.16.255.0/30])# policy allow\n admin@branchoffice1.seattlesite1 (network[network- address=172.16.255.0/30])# exit**\n")),Object(r.b)("p",null,"In this example we're advertising the CIDR ",Object(r.b)("inlineCode",{parentName:"p"},"172.16.255.0/30"),", and it will use the global route policy named ",Object(r.b)("inlineCode",{parentName:"p"},"allow")," (not shown)."),Object(r.b)("h4",{id:"redistributing-routes"},"Redistributing Routes"),Object(r.b)("p",null,"To redistribute connected, static, service routes and/or routes learned through OSPF, you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"redistribute")," configuration."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# config auth admin@branchoffice1.seattlesite1 (authority)# router seattlesite1 admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing-protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# redistribute connected\n")),Object(r.b)("h2",{id:"bgp-over-svr-bgposvr"},"BGP over SVR (BGPoSVR)"),Object(r.b)("p",null,"Use BGP over SVR when peering with a 128T to gain the benefit of Secure Vector Routing for all BGP traffic flowing to-and-from the 128T peers. "),Object(r.b)("p",null,"This procedure assumes that the 128T system is configured for basic platform functionality. Refer to the configuration example below for context."),Object(r.b)("p",null,"To configure BGP over SVR:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Configure a ",Object(r.b)("em",{parentName:"li"},"routing interface"),". This is similar to a loopback interface on traditional routers.\nUnlike normal loopback BGP peering, this IP address does not need to be routable on the transport network because it will never see the wire. BGP peering is created on this interface. The conductor triggers on this and autogenerates the following components to activate BGP over SVR:")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"bgp_speaker")," tenant"),Object(r.b)("li",{parentName:"ul"},"Auto-generated BGP services and service routes"),Object(r.b)("li",{parentName:"ul"},"Router Peers")),Object(r.b)("p",null,"These BGP connections are protected by SVR, and able to migrate between SVR paths."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You must use a conductor to configure BGP over SVR; manually configuring the various pieces between two routers is not supported."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If the interface facing the BGPoSVR peer is already part of a neighborhood, then ensure that the two routers' interface topology types (",Object(r.b)("inlineCode",{parentName:"p"},"network-interface >neighborhood > topology"),") are configured allowing the routers to form peering relationships for the auto-generated peer service routes; e.g., mesh-mesh, mesh-hub, mesh-spoke or hub-spoke."))),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Configure a BGP instance with the router\u2019s local AS and a router-id that matches the routing interface's IP. For each BGP over SVR peer, use a neighbor address of the neighbor's routing interface IP address. ")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Configure the BGP peer configuration options such as the timers and address families. In address-family IPv4-unicast, ",Object(r.b)("inlineCode",{parentName:"p"},"next-hop-self")," must be set to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"When configuring BGPoSVR with an eBGP peer, you must set ",Object(r.b)("inlineCode",{parentName:"p"},"multihop ttl")," to at least ",Object(r.b)("inlineCode",{parentName:"p"},"2"),"."))),Object(r.b)("h4",{id:"configuration-example"},"Configuration Example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"config\n    authority\n    router myRouter\n        routing default-instance\n            type default-instance\n            interface rtg-int\n                name rtg-int\n                ip-address <myAddress>\n            exit\n            routing-protocol bgp\n                type bgp\n                local-as 100\n                router-id <myAddress>\n                neighbor <theirAddress>\n                neighbor-as 200\n                timers\n                    hold-time 9\n                    keepalive-interval 3\n                exit\n                address-family ipv4-unicast\n                    afi-safi ipv4-unicast\n                    next-hop-self true\n                exit\n                transport\n                    local-address\n                        routing-interface rtg-int\n                    exit\n                exit\n                multihop\n                    ttl 255\n                exit\n            exit\n        exit\n    exit\nexit\n")),Object(r.b)("h4",{id:"sample-configuration"},"Sample Configuration:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# config auth admin@branchoffice1.seattlesite1 (authority)# router seattlesite1 admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# interface bgp-int-seattle\nadmin@branchoffice1.seattlesite1 (interface[name=bgp-int-seattle])# ip- address 10.128.128.2\nadmin@branchoffice1.seattlesite1 (interface[name=bgp-int-seattle])# exit admin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing- protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# local-as 100 admin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# router-id 10.128.128.2\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# address- family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# neighbor 10.128.128.1\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# neighbor-as 300\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# next-hop-self true\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# transport\nadmin@branchoffice1.seattlesite1 (transport)# local-address\nadmin@branchoffice1.seattlesite1 (local-address)# routing-interface bgp-int-seattle\nadmin@branchoffice1.seattlesite1 (local-address)# exit\nadmin@branchoffice1.seattlesite1 (transport)# exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# multihop\nadmin@branchoffice1.seattlesite1 (multihop)# ttl 255\nadmin@branchoffice1.seattlesite1 (multihop)# exit\nadmin@branchoffice1.seattlesite1 (neighbor[neighbor-address=10.128.128.1])# exit\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# exit admin@branchoffice1.seattlesite1 (routing[type=default-instance])# exit admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# exit admin@branchoffice1.seattlesite1 (authority)# exit admin@branchoffice1.seattlesite1#\n")),Object(r.b)("h3",{id:"verifying-the-bgp-configuration"},"Verifying the BGP Configuration"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"show bgp")," to see the overview of the BGP routing process on the 128T:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# show bgp\nWed 2019-02-20 23:14:58 UTC\nBGP table version is 12, local router ID is 10.128.128.2, vrf id 0\nStatus codes:  s suppressed, d damped, h history, * valid, > best, = multipath,\n               i internal, r RIB-failure, S Stale, R Removed\nNexthop codes: @NNN nexthop's vrf id, < announce-nh-self\nOrigin codes:  i - IGP, e - EGP, ? - incomplete\n\n   Network          Next Hop            Metric LocPrf Weight Path\n   10.128.128.2/32  10.128.128.3                           0 200 300 ?\n   10.128.128.3/32  10.128.128.3                           0 200 300 ?\n   128.128.128.1/32 10.128.128.3                           0 200 300 ?\n   128.128.128.128/32\n                    10.128.128.3                           0 200 300 ?\n   172.16.128.2/32  10.128.128.3                           0 200 300 ?\n   172.16.255.0/30  0.0.0.0                  0         32768 i\n   172.26.128.0/30  10.128.128.3                           0 200 300 i\n\nDisplayed  7 routes and 7 total paths\n")),Object(r.b)("p",null,"In addition to the output from ",Object(r.b)("inlineCode",{parentName:"p"},"show bgp"),", the contributions to the RIB from BGP are visible in the output of ",Object(r.b)("inlineCode",{parentName:"p"},"show rib"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# show rib\nWed 2019-02-20 23:04:20 UTC\nCodes: K - kernel route, C - connected, S - static, R - RIP,\n       O - OSPF, I - IS-IS, B - BGP, P - PIM, T - Table, v - VNC,\n       V - VNC-Direct,\n       > - selected route, * - FIB route\n\nB   1.1.1.0/24 [20/0] via 1.1.1.1 inactive, 22:28:18\nC>* 1.1.1.0/24 is directly connected, g4\nB>* 2.2.2.0/24 [20/0] via 1.1.1.1, g4, 22:28:18\nB>* 3.3.3.0/24 [20/0] via 1.1.1.1, g4, 22:28:18\nC>* 10.0.128.0/31 is directly connected, g1\nK>* 128.128.128.1/32 is directly connected, Null0, bh\nK>* 128.128.128.128/32 is directly connected, Null0, bh\nC>* 169.254.127.126/31 is directly connected, g4294967294\nS>* 172.16.128.2/32 [1/0] via 10.0.128.1, g1\nK   172.16.128.2/32 is directly connected, Null0, bh\nK>* 172.26.128.2/32 is directly connected, Null0, bh\nC>* 192.168.64.0/24 is directly connected, g2\n\n\nCompleted in 0.09 seconds\nadmin@branchoffice1.seattlesite1#\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"As shown in the header, the routes that start with ",Object(r.b)("strong",{parentName:"p"},"B")," are contributed by BGP."))),Object(r.b)("h2",{id:"vrf-bgp-over-svr"},"VRF BGP Over SVR"),Object(r.b)("p",null,"The establishment of a BGP session over SVR is achieved by the conductor auto-generating the necessary services and service-routes. The introduction of the VRF feature allows for configuring BGP instances within a VRF, and establishing BGP sessions with neighbors within the same VRF. "),Object(r.b)("p",null,"When configuring VRFs, there can be multiple BGP instances configured on one router, each one expecting to communicate via a separate VRF routing table. The result is that the generated routing-stack service-route needs to indicate which VRF table to direct the BGP session to."),Object(r.b)("p",null,"By explicitly disabling the auto-generation of BGP services and service-routes for any configured BGP neighbor, it is possible to establish BGP sessions that use routing interfaces (aka \u201cloopback\u201d interfaces) for communication without also using SVR."),Object(r.b)("p",null,"Other supported use cases include the ability to establish BGP over SVR sessions with each side residing in a different VRF. The typical scenario is a VPN architecture where one router is a CPE device on a customer site without any explicit VRF configuration. It connects to another router at the VPN provider which has a VRF configured for this customer and a BGP instance inside that VRF: "),Object(r.b)("p",null,Object(r.b)("img",{alt:"BGP Instance inside VRF",src:n(854).default})),Object(r.b)("p",null,"In this example, the BGP instance configured in the default VRF on a CPE router needs to establish a session with a VRF BGP instance in the VPN provider\u2019s router. To enable the generation of appropriate BGP service and service-route configuration objects, and in cases where the VRF's have overlapping address space, some additional BGP neighbor configuration is required."),Object(r.b)("h3",{id:"configuration-example-1"},"Configuration Example"),Object(r.b)("p",null,"The following example is based on the VPN provider scenario illustrated above: ",Object(r.b)("strong",{parentName:"p"},"router A")," (the VPN Provider) represents a core router with a BGP instance inside a VRF peered with ",Object(r.b)("strong",{parentName:"p"},"router B\u2019s")," (Customer Y) BGP instance inside the default VRF."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"authority\n    router A\n        routing default-instance\n            vrf vrfA\n                interface loopback-vrfA\n                    ip-address 10.0.0.10\n                exit\n                routing-protocol bgp\n                    local-as 500\n                    router-id 10.0.0.10\n                    neighbor 10.0.0.11\n                        neighbor-as 500\n                        transport\n                            bgp-service-generation\n                                neighbor-vrf default\n                            exit\n                            local-address\n                                routing-interface loopback-vrfA\n                            exit\n                        exit\n                    exit\n                exit\n            exit\n        exit\n    exit\n    router B\n        routing default-instance\n            interface loopback\n                 ip-address 10.0.0.11\n            exit\n            routing-protocol bgp\n                local-as 500\n                router-id 10.0.0.11\n                neighbor 10.0.0.10\n                    neighbor-as 500\n                    transport\n                        bgp-service-generation\n                            neighbor-vrf vrfA\n                        exit\n                        local-address\n                            routing-interface loopback\n                        exit\n                    exit\n                exit\n            exit\n        exit\n    exit\nexit\n\n")),Object(r.b)("h4",{id:"bgp-service-generation"},"BGP Service Generation"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"bgp-service-generation")," configuration object is available in a BGP neighbor\u2019s ",Object(r.b)("inlineCode",{parentName:"p"},"transport")," settings. For neighbors specified in the default routing instance or specified inside a VRF, the following choices are available:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"disabled\u2028"),": Do not generate BGP service or service-routes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"neighbor-vrf (<vrf-name>|default)\u2028"),": Name of the neighbor\u2019s VRF in which the peer BGP instance resides. Can be \u201cdefault\u201d to specify the default VRF."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"same-neighbor-vrf\u2028"),": (Default) Generate the BGP service if there is a matching peer with a BGP instance within the same VRF. Explicitly specifying this is equivalent to not configuring any ",Object(r.b)("inlineCode",{parentName:"li"},"bgp-service-generation")," statement.")),Object(r.b)("h4",{id:"routing-stack-service-route"},"Routing-Stack Service-Route"),Object(r.b)("p",null,"A service-route of type ",Object(r.b)("inlineCode",{parentName:"p"},"routing-stack")," can be directed to a specific VRF:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"authority\n    router\n        service-route <service-route-name>\n            service-name <service-name>\n            routing-stack\n            routing-stack-vrf <vrf-name>\n")),Object(r.b)("p",null,"The existing ",Object(r.b)("inlineCode",{parentName:"p"},"routing-stack")," statement directs the session into the ",Object(r.b)("inlineCode",{parentName:"p"},"routingEngine")," network namespace used by the routing engine. The optional ",Object(r.b)("inlineCode",{parentName:"p"},"routing-stack-vrf <vrf-name>")," statement specifies the desired VRF within the ",Object(r.b)("inlineCode",{parentName:"p"},"routingEngine")," namespace. The ",Object(r.b)("inlineCode",{parentName:"p"},"vrf-name")," parameter is a reference to an existing VRF in the same router. If no ",Object(r.b)("inlineCode",{parentName:"p"},"routing-stack-vrf")," is specified, the target of the service-route is the default VRF."),Object(r.b)("p",null,"Service-routes of type ",Object(r.b)("inlineCode",{parentName:"p"},"routing-stack")," are automatically generated by the conductor for use with an auto-generated BGP service. Manually creating this type of service-route is not supported."),Object(r.b)("h4",{id:"generated-services-and-tenants"},"Generated Services and Tenants"),Object(r.b)("p",null,"More than one access-policy can be specified in a service; a service is generated for each unique routing-interface and VRF tuple for a given router. Because multiple peering relationships may exist using that service, the access-policy lists all tenants associated with the BGP neighbors using that service for peering. All tenants used in these access-policy statements appear as generated tenants in the configuration, one for each VRF in use."),Object(r.b)("p",null,"For a BGP neighbor residing in the default VRF, the generated BGP service  is named ",Object(r.b)("inlineCode",{parentName:"p"},"_bgp_<router-name>_<routing-interface-name>"),", and the tenant associated with this BGP neighbor in the default VRF is named ",Object(r.b)("inlineCode",{parentName:"p"},"_bgp_speaker_"),"."),Object(r.b)("p",null,"For a BGP neighbor residing in a non-default VRF, the generated BGP service is named ",Object(r.b)("inlineCode",{parentName:"p"},"_bgp_<router-name>_<vrf-name>_<vrf-routing-interface-name>"),". The associated tenant is named ",Object(r.b)("inlineCode",{parentName:"p"},"_<vrf-name>._vrf_bgp_speaker_"),"."),Object(r.b)("h3",{id:"troubleshooting"},"Troubleshooting"),Object(r.b)("p",null,"If expected BGP services or service-routes are not auto-generated, use the log messages on the conductor to troubleshoot. Each BGP service and service-route that is generated or skipped for config generation results in a debug level log message. These messages are written to ",Object(r.b)("inlineCode",{parentName:"p"},"persistentDataManager.log")," with category RTG and sub-category CFG."),Object(r.b)("p",null,"If all expected configuration has been generated, but a BGP over SVR session does not come up, then all available tools for debugging traffic problems also apply to BGP sessions:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"show fib"),Object(r.b)("li",{parentName:"ul"},"show service-path"),Object(r.b)("li",{parentName:"ul"},"show sessions")),Object(r.b)("p",null,"Additionally, use the ",Object(r.b)("inlineCode",{parentName:"p"},"show rib {vrf <vrf-name>}")," command to verify the BGP neighbor is reachable and its kernel route entry is not superseded by another, higher priority entry in the RIB. "),Object(r.b)("h2",{id:"routing-features"},"Routing Features"),Object(r.b)("p",null,"This section contains various features supported by the 128T's BGP implementation."),Object(r.b)("h3",{id:"configuring-128t-as-a-route-reflector"},"Configuring 128T as a Route Reflector"),Object(r.b)("p",null,"While configuring iBGP, you may need to enable the ",Object(r.b)("strong",{parentName:"p"},"Route Reflector")," capability to facilitate easy learning of routes. Your 128T can be configured as a route reflector for a particular neighbor or more realistically a set of neighbors, also known as a route reflector client(s). This can be configured in the route reflector router's BGP config, under the respective neighbor object."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# config auth admin@branchoffice1.seattlesite1 (authority)# router seattlesite1 admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing- protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# neighbor 1.1.1.1\n")),Object(r.b)("p",null,"In our example, the route reflector in our network is ",Object(r.b)("inlineCode",{parentName:"p"},"branchoffice1")," router, and our route reflector client is its neighbor ",Object(r.b)("inlineCode",{parentName:"p"},"1.1.1.1"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1 (neighbor[neighbor-address=1.1.1.1])# address-family ipv4-unicast\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# route-reflector client true\nadmin@branchoffice1.seattlesite1 (address-family[afi-safi=ipv4-unicast])# exit\n")),Object(r.b)("p",null,"By setting ",Object(r.b)("inlineCode",{parentName:"p"},"route-reflector client true"),", we instruct the ",Object(r.b)("inlineCode",{parentName:"p"},"branchoffice1")," router to treat the neighbor as a route reflector client."),Object(r.b)("p",null,"There is one additional field which needs to be set in route reflector's BGP config, and that is ",Object(r.b)("inlineCode",{parentName:"p"},"Client-ID"),", which has the format of an IP address. This can be set to anything unique in the AS, and can be the same as the ",Object(r.b)("inlineCode",{parentName:"p"},"Router ID")," field."),Object(r.b)("p",null,"When the route reflector sends routes to the clients, by default it doesn't modify the next-hop. An outbound policy can be used to change the next-hop in these routes to that of the route reflector, if desired. In such instances, another option, which is turned off by default, needs to be set in the route reflector's BGP config: ",Object(r.b)("inlineCode",{parentName:"p"},"Route Reflector Allow Outbound Policy = TRUE"),"."),Object(r.b)("h3",{id:"bgp-confederations"},"BGP Confederations"),Object(r.b)("p",null,"When configuring iBGP, the ",Object(r.b)("strong",{parentName:"p"},"Confederation")," feature may be helpful when dealing with an enormous autonomous system. This feature allows you to break up the AS into smaller sub-autonomous systems. Confederation can be directly configured under the routing protocol element. Here, 65535 is the ",Object(r.b)("strong",{parentName:"p"},"confederation identifier AS number")," and, 1100 and 2200 are the ",Object(r.b)("strong",{parentName:"p"},"member AS")," numbers of that confederation AS."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"admin@branchoffice1.seattlesite1# config auth admin@branchoffice1.seattlesite1 (authority)# router seattlesite1 admin@branchoffice1.seattlesite1 (router[name=seattlesite1])# routing default-instance\nadmin@branchoffice1.seattlesite1 (routing[type=default-instance])# routing- protocol bgp\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# confederation identifier 65535\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# confederation member-as 1100\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# confederation member-as 2200\nadmin@branchoffice1.seattlesite1 (routing-protocol[type=bgp])# exit\n")))}b.isMDXComponent=!0},222:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=b(n),p=i,h=d["".concat(o,".").concat(p)]||d[p]||u[p]||r;return n?a.a.createElement(h,s(s({ref:t},l),{},{components:n})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},854:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/config_BGPoSVRinVRF-b1f0b14a118e12dfc45016eef75713d8.png"}}]);